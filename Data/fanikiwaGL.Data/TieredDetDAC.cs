//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/27/2014 07:50:58 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// TieredDet data access component. Manages CRUD operations for the TieredDet table.
    /// </summary>
    public partial class TieredDetDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TieredDet table.
        /// </summary>
        /// <param name="tieredDet">A TieredDet object.</param>
        /// <returns>An updated TieredDet object.</returns>
        public TieredDet Create(TieredDet tieredDet)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TieredDet ([TieredID], [Min], [Max], [Rate], [Absolute]) " +
                "VALUES(@TieredID, @Min, @Max, @Rate, @Absolute); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TieredID", DbType.Int32, tieredDet.TieredID);
                db.AddInParameter(cmd, "@Min", DbType.Decimal, tieredDet.Min);
                db.AddInParameter(cmd, "@Max", DbType.Decimal, tieredDet.Max);
                db.AddInParameter(cmd, "@Rate", DbType.Decimal, tieredDet.Rate);
                db.AddInParameter(cmd, "@Absolute", DbType.Boolean, tieredDet.Absolute);

                // Get the primary key value.
                tieredDet.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return tieredDet;
        }

        /// <summary>
        /// Updates an existing row in the TieredDet table.
        /// </summary>
        /// <param name="tieredDet">A TieredDet entity object.</param>
        public void UpdateById(TieredDet tieredDet)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TieredDet " +
                "SET " +
                    "[TieredID]=@TieredID, " +
                    "[Min]=@Min, " +
                    "[Max]=@Max, " +
                    "[Rate]=@Rate, " +
                    "[Absolute]=@Absolute " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TieredID", DbType.Int32, tieredDet.TieredID);
                db.AddInParameter(cmd, "@Min", DbType.Decimal, tieredDet.Min);
                db.AddInParameter(cmd, "@Max", DbType.Decimal, tieredDet.Max);
                db.AddInParameter(cmd, "@Rate", DbType.Decimal, tieredDet.Rate);
                db.AddInParameter(cmd, "@Absolute", DbType.Boolean, tieredDet.Absolute);
                db.AddInParameter(cmd, "@Id", DbType.Int32, tieredDet.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TieredDet table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TieredDet " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TieredDet table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A TieredDet object with data populated from the database.</returns>
        public TieredDet SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [TieredID], [Min], [Max], [Rate], [Absolute] " +
                "FROM dbo.TieredDet  " +
                "WHERE [Id]=@Id ";

            TieredDet tieredDet = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TieredDet
                        tieredDet = new TieredDet();

                        // Read values.
                        tieredDet.Id = base.GetDataValue<int>(dr, "Id");
                        tieredDet.TieredID = base.GetDataValue<int>(dr, "TieredID");
                        tieredDet.Min = base.GetDataValue<decimal>(dr, "Min");
                        tieredDet.Max = base.GetDataValue<decimal>(dr, "Max");
                        tieredDet.Rate = base.GetDataValue<decimal>(dr, "Rate");
                        tieredDet.Absolute = base.GetDataValue<bool>(dr, "Absolute");
                    }
                }
            }

            return tieredDet;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TieredDet table.
        /// </summary>
        /// <returns>A collection of TieredDet objects.</returns>		
        public List<TieredDet> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [TieredID], [Min], [Max], [Rate], [Absolute] " +
                "FROM dbo.TieredDet ";

            List<TieredDet> result = new List<TieredDet>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TieredDet
                        TieredDet tieredDet = new TieredDet();

                        // Read values.
                        tieredDet.Id = base.GetDataValue<int>(dr, "Id");
                        tieredDet.TieredID = base.GetDataValue<int>(dr, "TieredID");
                        tieredDet.Min = base.GetDataValue<decimal>(dr, "Min");
                        tieredDet.Max = base.GetDataValue<decimal>(dr, "Max");
                        tieredDet.Rate = base.GetDataValue<decimal>(dr, "Rate");
                        tieredDet.Absolute = base.GetDataValue<bool>(dr, "Absolute");

                        // Add to List.
                        result.Add(tieredDet);
                    }
                }
            }

            return result;
        }
    }
}

