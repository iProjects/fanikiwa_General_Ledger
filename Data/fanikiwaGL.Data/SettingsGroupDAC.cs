//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/24/2013 16:52:15 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// SettingsGroups data access component. Manages CRUD operations for the SettingsGroups table.
    /// </summary>
    public partial class SettingsGroupDAC : DataAccessComponent
    {

        /// <summary>
        /// Inserts a new row in the SettingsGroups table.
        /// </summary>
        /// <param name="settingsGroup">A SettingsGroup object.</param>
        /// <returns>An updated SettingsGroup object.</returns>
        public SettingsGroup Create(SettingsGroup settingsGroup)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SettingsGroups ([GroupName], [Parent]) " +
                "VALUES(@GroupName, @Parent); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GroupName", DbType.AnsiString, settingsGroup.GroupName);
                db.AddInParameter(cmd, "@Parent", DbType.Int32, settingsGroup.Parent);

                // Get the primary key value.
                settingsGroup.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return settingsGroup;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SettingsGroups table.
        /// </summary>
        /// <returns>A collection of SettingsGroup objects.</returns>		
        public List<SettingsGroup> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [GroupName], [Parent] " +
                "FROM dbo.SettingsGroups ";

            List<SettingsGroup> result = new List<SettingsGroup>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SettingsGroup
                        SettingsGroup settingsGroup = new SettingsGroup();

                        // Read values.
                        settingsGroup.Id = base.GetDataValue<int>(dr, "Id");
                        settingsGroup.GroupName = base.GetDataValue<string>(dr, "GroupName");
                        settingsGroup.Parent = base.GetDataValue<int>(dr, "Parent");

                        // Add to List.
                        result.Add(settingsGroup);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Updates an existing row in the SettingsGroups table.
        /// </summary>
        /// <param name="settingsGroup">A SettingsGroup entity object.</param>
        public void UpdateById(SettingsGroup settingsGroup)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SettingsGroups " +
                "SET " +
                    "[GroupName]=@GroupName, " +
                    "[Parent]=@Parent " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GroupName", DbType.AnsiString, settingsGroup.GroupName);
                db.AddInParameter(cmd, "@Parent", DbType.Int32, settingsGroup.Parent);
                db.AddInParameter(cmd, "@Id", DbType.Int32, settingsGroup.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SettingsGroups table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SettingsGroups " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.

                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SettingsGroups table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A SettingsGroup object with data populated from the database.</returns>
        public SettingsGroup SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [GroupName], [Parent] " +
                "FROM dbo.SettingsGroups  " +
                "WHERE [Id]=@Id ";

            SettingsGroup settingsGroup = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SettingsGroup
                        settingsGroup = new SettingsGroup();

                        // Read values.
                        settingsGroup.Id = base.GetDataValue<int>(dr, "Id");
                        settingsGroup.GroupName = base.GetDataValue<string>(dr, "GroupName");
                        settingsGroup.Parent = base.GetDataValue<int>(dr, "Parent");
                    }
                }
            }

            return settingsGroup;
        }
    }
}
