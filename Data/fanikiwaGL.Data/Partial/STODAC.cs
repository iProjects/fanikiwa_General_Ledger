//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/09/2015 16:02:26 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// STO data access component. Manages CRUD operations for the STO table.
    /// </summary>
    public partial class STODAC 
    {

        public List<STO> SelectCrSTOByMemberId(int MemberId)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [AmountPaid], [PayAmount], [TotalToPay], [DrAccount], [CrAccount], [NextPayDate]" +
                        ", [CreateDate], [StartDate], [Interval], [NoOfPayments], [NoOfPaymentsMade], [NoOfDefaults]" +
                        ", [AmountDefaulted], [EndDate], [STOType], [ChargeCommFlag], [CommFreqFlag], [CommSourceFlag]" +
                        ", [ChargeWho], [CommissionAccount], [CommissionPaidFlag], [CommissionAmount], [DrTxnType]" +
                        ", [CrTxnType], st.[LimitFlag], [PartialPay], [LoanId], [STOAccType] " +
                "FROM dbo.STO st " +
                "INNER JOIN  dbo.Accounts ac ON ac.AccountID =  st.CrAccount " +
                "INNER JOIN  dbo.Customers cus ON ac.CustomerId =  cus.CustomerId " +
                "WHERE cus.MemberId=@MemberId ";

            List<STO> result = new List<STO>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, MemberId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new STO
                        STO sTO = new STO();

                        // Read values.
                        sTO.Id = base.GetDataValue<int>(dr, "Id");
                        sTO.AmountPaid = base.GetDataValue<decimal>(dr, "AmountPaid");
                        sTO.PayAmount = base.GetDataValue<decimal>(dr, "PayAmount");
                        sTO.TotalToPay = base.GetDataValue<decimal>(dr, "TotalToPay");
                        sTO.DrAccount = base.GetDataValue<int>(dr, "DrAccount");
                        sTO.CrAccount = base.GetDataValue<int>(dr, "CrAccount");
                        sTO.NextPayDate = base.GetDataValue<DateTime>(dr, "NextPayDate");
                        sTO.CreateDate = base.GetDataValue<DateTime>(dr, "CreateDate");
                        sTO.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        sTO.Interval = base.GetDataValue<string>(dr, "Interval");
                        sTO.NoOfPayments = base.GetDataValue<int>(dr, "NoOfPayments");
                        sTO.NoOfPaymentsMade = base.GetDataValue<int>(dr, "NoOfPaymentsMade");
                        sTO.NoOfDefaults = base.GetDataValue<int>(dr, "NoOfDefaults");
                        sTO.AmountDefaulted = base.GetDataValue<decimal>(dr, "AmountDefaulted");
                        sTO.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        sTO.STOType = base.GetDataValue<int>(dr, "STOType");
                        sTO.ChargeCommFlag = base.GetDataValue<bool>(dr, "ChargeCommFlag");
                        sTO.CommFreqFlag = base.GetDataValue<short>(dr, "CommFreqFlag");
                        sTO.CommSourceFlag = base.GetDataValue<short>(dr, "CommSourceFlag");
                        sTO.ChargeWho = base.GetDataValue<short>(dr, "ChargeWho");
                        sTO.CommissionAccount = base.GetDataValue<int>(dr, "CommissionAccount");
                        sTO.CommissionPaidFlag = base.GetDataValue<bool>(dr, "CommissionPaidFlag");
                        sTO.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        sTO.DrTxnType = base.GetDataValue<int>(dr, "DrTxnType");
                        sTO.CrTxnType = base.GetDataValue<int>(dr, "CrTxnType");
                        sTO.LimitFlag = base.GetDataValue<int>(dr, "LimitFlag");
                        sTO.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");
                        sTO.LoanId = base.GetDataValue<int>(dr, "LoanId");
                        sTO.STOAccType = base.GetDataValue<int>(dr, "STOAccType");

                        //addd to list
                        result.Add(sTO);
                    }
                }
            }

            return result;
        }

        public List<STO> SelectDrSTOByMemberId(int MemberId)
        {
            const string SQL_STATEMENT =
             "SELECT [Id], [AmountPaid], [PayAmount], [TotalToPay], [DrAccount], [CrAccount], [NextPayDate]" +
                        ", [CreateDate], [StartDate], [Interval], [NoOfPayments], [NoOfPaymentsMade], [NoOfDefaults]" +
                        ", [AmountDefaulted], [EndDate], [STOType], [ChargeCommFlag], [CommFreqFlag], [CommSourceFlag]" +
                        ", [ChargeWho], [CommissionAccount], [CommissionPaidFlag], [CommissionAmount], [DrTxnType]" +
                        ", [CrTxnType], st.[LimitFlag], [PartialPay], [LoanId], [STOAccType] " +
                "FROM dbo.STO st " +
                "INNER JOIN  dbo.Accounts ac ON ac.AccountID =  st.DrAccount " +
                "INNER JOIN  dbo.Customers cus ON ac.CustomerId =  cus.CustomerId " +
                "WHERE cus.MemberId=@MemberId ";

            List<STO> result = new List<STO>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, MemberId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new STO
                        STO sTO = new STO();

                        // Read values.
                        sTO.Id = base.GetDataValue<int>(dr, "Id");
                        sTO.AmountPaid = base.GetDataValue<decimal>(dr, "AmountPaid");
                        sTO.PayAmount = base.GetDataValue<decimal>(dr, "PayAmount");
                        sTO.TotalToPay = base.GetDataValue<decimal>(dr, "TotalToPay");
                        sTO.DrAccount = base.GetDataValue<int>(dr, "DrAccount");
                        sTO.CrAccount = base.GetDataValue<int>(dr, "CrAccount");
                        sTO.NextPayDate = base.GetDataValue<DateTime>(dr, "NextPayDate");
                        sTO.CreateDate = base.GetDataValue<DateTime>(dr, "CreateDate");
                        sTO.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        sTO.Interval = base.GetDataValue<string>(dr, "Interval");
                        sTO.NoOfPayments = base.GetDataValue<int>(dr, "NoOfPayments");
                        sTO.NoOfPaymentsMade = base.GetDataValue<int>(dr, "NoOfPaymentsMade");
                        sTO.NoOfDefaults = base.GetDataValue<int>(dr, "NoOfDefaults");
                        sTO.AmountDefaulted = base.GetDataValue<decimal>(dr, "AmountDefaulted");
                        sTO.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        sTO.STOType = base.GetDataValue<int>(dr, "STOType");
                        sTO.ChargeCommFlag = base.GetDataValue<bool>(dr, "ChargeCommFlag");
                        sTO.CommFreqFlag = base.GetDataValue<short>(dr, "CommFreqFlag");
                        sTO.CommSourceFlag = base.GetDataValue<short>(dr, "CommSourceFlag");
                        sTO.ChargeWho = base.GetDataValue<short>(dr, "ChargeWho");
                        sTO.CommissionAccount = base.GetDataValue<int>(dr, "CommissionAccount");
                        sTO.CommissionPaidFlag = base.GetDataValue<bool>(dr, "CommissionPaidFlag");
                        sTO.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        sTO.DrTxnType = base.GetDataValue<int>(dr, "DrTxnType");
                        sTO.CrTxnType = base.GetDataValue<int>(dr, "CrTxnType");
                        sTO.LimitFlag = base.GetDataValue<int>(dr, "LimitFlag");
                        sTO.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");
                        sTO.LoanId = base.GetDataValue<int>(dr, "LoanId");
                        sTO.STOAccType = base.GetDataValue<int>(dr, "STOAccType");

                        //addd to list
                        result.Add(sTO);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the STO table.
        /// </summary>
        /// <param name="nextPayDate">A nextPayDate value.</param>
        /// <returns>A collection of STO objects.</returns>		
        public List<STO> SelectByPayDate(DateTime nextPayDate)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [AmountPaid], [PayAmount], [TotalToPay], [DrAccount], [CrAccount], [NextPayDate]" +
                        ", [CreateDate], [StartDate], [Interval], [NoOfPayments], [NoOfPaymentsMade], [NoOfDefaults]" +
                        ", [AmountDefaulted], [EndDate], [STOType], [ChargeCommFlag], [CommFreqFlag], [CommSourceFlag]" +
                        ", [ChargeWho], [CommissionAccount], [CommissionPaidFlag], [CommissionAmount], [DrTxnType]" +
                        ", [CrTxnType], [LimitFlag], [PartialPay], [LoanId], [STOAccType] " +
                "FROM dbo.STO " +
                "WHERE [NextPayDate]=@NextPayDate ";

            List<STO> result = new List<STO>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@NextPayDate", DbType.DateTime2, nextPayDate);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new STO
                        STO sTO = new STO();

                        // Read values.
                        sTO.Id = base.GetDataValue<int>(dr, "Id");
                        sTO.AmountPaid = base.GetDataValue<decimal>(dr, "AmountPaid");
                        sTO.PayAmount = base.GetDataValue<decimal>(dr, "PayAmount");
                        sTO.TotalToPay = base.GetDataValue<decimal>(dr, "TotalToPay");
                        sTO.DrAccount = base.GetDataValue<int>(dr, "DrAccount");
                        sTO.CrAccount = base.GetDataValue<int>(dr, "CrAccount");
                        sTO.NextPayDate = base.GetDataValue<DateTime>(dr, "NextPayDate");
                        sTO.CreateDate = base.GetDataValue<DateTime>(dr, "CreateDate");
                        sTO.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        sTO.Interval = base.GetDataValue<string>(dr, "Interval");
                        sTO.NoOfPayments = base.GetDataValue<int>(dr, "NoOfPayments");
                        sTO.NoOfPaymentsMade = base.GetDataValue<int>(dr, "NoOfPaymentsMade");
                        sTO.NoOfDefaults = base.GetDataValue<int>(dr, "NoOfDefaults");
                        sTO.AmountDefaulted = base.GetDataValue<decimal>(dr, "AmountDefaulted");
                        sTO.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        sTO.STOType = base.GetDataValue<int>(dr, "STOType");
                        sTO.ChargeCommFlag = base.GetDataValue<bool>(dr, "ChargeCommFlag");
                        sTO.CommFreqFlag = base.GetDataValue<short>(dr, "CommFreqFlag");
                        sTO.CommSourceFlag = base.GetDataValue<short>(dr, "CommSourceFlag");
                        sTO.ChargeWho = base.GetDataValue<short>(dr, "ChargeWho");
                        sTO.CommissionAccount = base.GetDataValue<int>(dr, "CommissionAccount");
                        sTO.CommissionPaidFlag = base.GetDataValue<bool>(dr, "CommissionPaidFlag");
                        sTO.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        sTO.DrTxnType = base.GetDataValue<int>(dr, "DrTxnType");
                        sTO.CrTxnType = base.GetDataValue<int>(dr, "CrTxnType");
                        sTO.LimitFlag = base.GetDataValue<int>(dr, "LimitFlag");
                        sTO.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");
                        sTO.LoanId = base.GetDataValue<int>(dr, "LoanId");
                        sTO.STOAccType = base.GetDataValue<int>(dr, "STOAccType");

                        // Add to List.
                        result.Add(sTO);
                    }
                }
            }

            return result;
        }

        public List<STO> SelectSTOByDateFrom(DateTime nextPayDate)
        {
            const string SQL_STATEMENT =
                "SELECT * " +
                "FROM dbo.STO  " +
                "WHERE [NextPayDate] <= @NextPayDate " +
                "AND [EndDate] >= @EndDate " +
                "AND [FeesFlag] Not In (0,2) ";

            List<STO> result = new List<STO>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@NextPayDate", DbType.DateTime2, nextPayDate.Date);
                db.AddInParameter(cmd, "@EndDate", DbType.DateTime2, nextPayDate.Date);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new STO
                        STO sTO = new STO();

                        // Read values.
                        sTO.Id = base.GetDataValue<int>(dr, "Id");
                        sTO.AmountPaid = base.GetDataValue<decimal>(dr, "AmountPaid");
                        sTO.PayAmount = base.GetDataValue<decimal>(dr, "PayAmount");
                        sTO.TotalToPay = base.GetDataValue<decimal>(dr, "TotalToPay");
                        sTO.DrAccount = base.GetDataValue<int>(dr, "DrAccount");
                        sTO.CrAccount = base.GetDataValue<int>(dr, "CrAccount");
                        sTO.NextPayDate = base.GetDataValue<DateTime>(dr, "NextPayDate");
                        sTO.CreateDate = base.GetDataValue<DateTime>(dr, "CreateDate");
                        sTO.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        sTO.Interval = base.GetDataValue<string>(dr, "Interval");
                        sTO.NoOfPayments = base.GetDataValue<int>(dr, "NoOfPayments");
                        sTO.NoOfPaymentsMade = base.GetDataValue<int>(dr, "NoOfPaymentsMade");
                        sTO.NoOfDefaults = base.GetDataValue<int>(dr, "NoOfDefaults");
                        sTO.AmountDefaulted = base.GetDataValue<decimal>(dr, "AmountDefaulted");
                        sTO.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        sTO.STOType = base.GetDataValue<int>(dr, "STOType");
                        sTO.ChargeCommFlag = base.GetDataValue<bool>(dr, "ChargeCommFlag");
                        sTO.CommFreqFlag = base.GetDataValue<short>(dr, "CommFreqFlag");
                        sTO.CommSourceFlag = base.GetDataValue<short>(dr, "CommSourceFlag");
                        sTO.ChargeWho = base.GetDataValue<short>(dr, "ChargeWho");
                        sTO.CommissionAccount = base.GetDataValue<int>(dr, "CommissionAccount");
                        sTO.CommissionPaidFlag = base.GetDataValue<bool>(dr, "CommissionPaidFlag");
                        sTO.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        sTO.DrTxnType = base.GetDataValue<int>(dr, "DrTxnType");
                        sTO.CrTxnType = base.GetDataValue<int>(dr, "CrTxnType");
                        sTO.LimitFlag = base.GetDataValue<int>(dr, "LimitFlag");
                        sTO.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");
                        sTO.LoanId = base.GetDataValue<int>(dr, "LoanId");
                        sTO.STOAccType = base.GetDataValue<int>(dr, "STOAccType");

                        // Add to List.
                        result.Add(sTO);
                    }
                }
            }

            return result;
        }

    }


}

