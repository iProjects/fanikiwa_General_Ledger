//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC7070W on 09/05/2013 18:50:44 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// Accounts data access component. Manages CRUD operations for the Accounts table.
    /// </summary>
    public partial class AccountDAC 
    { 
         
        /// <summary>
        /// Conditionally retrieves one or more rows from the Accounts table.
        /// </summary>
        /// <returns>A collection of Account objects.</returns>		
        public List<Account> SelectOpenAccounts()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [AccountID], [CustomerId], [AccountName], [AccountNo], [AccountTypeId], [COAId]" +
                        ", [Branch], [PassFlag], [BookBalance], [ClearedBalance], [InterestRate], [AccruedInt]" +
                        ", [Limit], [LimitFlag], [LimitCheckFlag], [Bal30], [Bal60], [Bal90], [BalOver90], [IntRate30]" +
                        ", [IntRate60], [IntRate90], [IntRateOver90], [Closed] " +
                "FROM dbo.Accounts " +
                "WHERE [Closed]= 'false' ";

            List<Account> result = new List<Account>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Account
                        Account account = new Account();

                        // Read values.
                        account.AccountID = base.GetDataValue<int>(dr, "AccountID");
                        account.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        account.AccountName = base.GetDataValue<string>(dr, "AccountName");
                        account.AccountNo = base.GetDataValue<string>(dr, "AccountNo");
                        account.AccountTypeId = base.GetDataValue<int>(dr, "AccountTypeId");
                        account.COAId = base.GetDataValue<int>(dr, "COAId");
                        account.Branch = base.GetDataValue<string>(dr, "Branch");
                        account.PassFlag = base.GetDataValue<short>(dr, "PassFlag");
                        account.BookBalance = base.GetDataValue<decimal>(dr, "BookBalance");
                        account.ClearedBalance = base.GetDataValue<decimal>(dr, "ClearedBalance");
                        account.InterestRate = base.GetDataValue<double>(dr, "InterestRate");
                        account.AccruedInt = base.GetDataValue<decimal>(dr, "AccruedInt");
                        account.Limit = base.GetDataValue<decimal>(dr, "Limit");
                        account.LimitFlag = base.GetDataValue<short>(dr, "LimitFlag");
                        account.LimitCheckFlag = base.GetDataValue<short>(dr, "LimitCheckFlag");
                        account.Bal30 = base.GetDataValue<decimal>(dr, "Bal30");
                        account.Bal60 = base.GetDataValue<decimal>(dr, "Bal60");
                        account.Bal90 = base.GetDataValue<decimal>(dr, "Bal90");
                        account.BalOver90 = base.GetDataValue<decimal>(dr, "BalOver90");
                        account.IntRate30 = base.GetDataValue<double>(dr, "IntRate30");
                        account.IntRate60 = base.GetDataValue<double>(dr, "IntRate60");
                        account.IntRate90 = base.GetDataValue<double>(dr, "IntRate90");
                        account.IntRateOver90 = base.GetDataValue<double>(dr, "IntRateOver90");
                        account.Closed = base.GetDataValue<bool>(dr, "Closed");

                        // Add to List.
                        result.Add(account);
                    }
                }
            }

            return result;
        }


        /// <summary>
        /// Conditionally retrieves one or more rows from the Accounts table.
        /// </summary>
        /// <returns>A collection of Account objects.</returns>		
        public List<Account> SelectClosedAccounts()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [AccountID], [CustomerId], [AccountName], [AccountNo], [AccountTypeId], [COAId]" +
                        ", [Branch], [PassFlag], [BookBalance], [ClearedBalance], [InterestRate], [AccruedInt]" +
                        ", [Limit], [LimitFlag], [LimitCheckFlag], [Bal30], [Bal60], [Bal90], [BalOver90], [IntRate30]" +
                        ", [IntRate60], [IntRate90], [IntRateOver90], [Closed] " +
                "FROM dbo.Accounts " +
                "WHERE [Closed]= 'true' ";

            List<Account> result = new List<Account>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Account
                        Account account = new Account();

                        // Read values.
                        account.AccountID = base.GetDataValue<int>(dr, "AccountID");
                        account.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        account.AccountName = base.GetDataValue<string>(dr, "AccountName");
                        account.AccountNo = base.GetDataValue<string>(dr, "AccountNo");
                        account.AccountTypeId = base.GetDataValue<int>(dr, "AccountTypeId");
                        account.COAId = base.GetDataValue<int>(dr, "COAId");
                        account.Branch = base.GetDataValue<string>(dr, "Branch");
                        account.PassFlag = base.GetDataValue<short>(dr, "PassFlag");
                        account.BookBalance = base.GetDataValue<decimal>(dr, "BookBalance");
                        account.ClearedBalance = base.GetDataValue<decimal>(dr, "ClearedBalance");
                        account.InterestRate = base.GetDataValue<double>(dr, "InterestRate");
                        account.AccruedInt = base.GetDataValue<decimal>(dr, "AccruedInt");
                        account.Limit = base.GetDataValue<decimal>(dr, "Limit");
                        account.LimitFlag = base.GetDataValue<short>(dr, "LimitFlag");
                        account.LimitCheckFlag = base.GetDataValue<short>(dr, "LimitCheckFlag");
                        account.Bal30 = base.GetDataValue<decimal>(dr, "Bal30");
                        account.Bal60 = base.GetDataValue<decimal>(dr, "Bal60");
                        account.Bal90 = base.GetDataValue<decimal>(dr, "Bal90");
                        account.BalOver90 = base.GetDataValue<decimal>(dr, "BalOver90");
                        account.IntRate30 = base.GetDataValue<double>(dr, "IntRate30");
                        account.IntRate60 = base.GetDataValue<double>(dr, "IntRate60");
                        account.IntRate90 = base.GetDataValue<double>(dr, "IntRate90");
                        account.IntRateOver90 = base.GetDataValue<double>(dr, "IntRateOver90");
                        account.Closed = base.GetDataValue<bool>(dr, "Closed");

                        // Add to List.
                        result.Add(account);
                    }
                }
            }

            return result;
        }



    }
}
