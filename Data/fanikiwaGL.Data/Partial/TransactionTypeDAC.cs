//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC7070W on 09/06/2013 09:34:09 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// TransactionTypes data access component. Manages CRUD operations for the TransactionTypes table.
    /// </summary>
    public partial class TransactionTypeDAC 
    {     
  
        /// <summary>
        /// Returns a row from the TieredDet table.
        /// </summary>
        /// <param name="TieredID">A TieredID value.</param>
        /// <returns>A TieredDet object with data populated from the database.</returns>
        public List<TieredDet> SelectTieredTable(int tieredID)
        {
            const string SQL_STATEMENT =
                "SELECT [Id]," +
               "[TieredID]," +
                   "[Min]," +
                   "[Max]," +
                    "[Rate]," +
                    "[Absolute]" +
                        " " +
                "FROM dbo.TieredDet  " +
                "WHERE [TieredID]=@TieredID " ;
             
            List<TieredDet> result = new List<TieredDet>();
         
            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TieredID", DbType.Int32, tieredID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TieredDet
                        TieredDet tieredDet = new TieredDet();

                        // Read values.
                        tieredDet.Id = base.GetDataValue<int>(dr, "Id");
                        tieredDet.TieredID = base.GetDataValue<int>(dr, "TieredID");
                        tieredDet.Min = base.GetDataValue<decimal>(dr, "Min");
                        tieredDet.Max = base.GetDataValue<decimal>(dr, "Max");
                        tieredDet.Rate = base.GetDataValue<decimal>(dr, "Rate");
                        tieredDet.Absolute = base.GetDataValue<bool>(dr, "Absolute");

                         // Add to List.
                        result.Add(tieredDet);
                    }
                     
                }
            }

            return result;
        }

    }
}
