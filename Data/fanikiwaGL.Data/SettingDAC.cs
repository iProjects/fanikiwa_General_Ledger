//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/24/2013 16:52:15 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// Settings data access component. Manages CRUD operations for the Settings table.
    /// </summary>
    public partial class SettingDAC : DataAccessComponent
    {

        /// <summary>
        /// Inserts a new row in the Settings table.
        /// </summary>
        /// <param name="setting">A Setting object.</param>
        /// <returns>An updated Setting object.</returns>
        public Setting Create(Setting setting)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Settings ([SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem]) " +
                "VALUES(@SSKey, @SSValue, @SSValueType, @Description, @SGroup, @SSSystem);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, setting.SSKey);
                db.AddInParameter(cmd, "@SSValue", DbType.AnsiString, setting.SSValue);
                db.AddInParameter(cmd, "@SSValueType", DbType.AnsiString, setting.SSValueType);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, setting.Description);
                db.AddInParameter(cmd, "@SGroup", DbType.Int32, setting.SGroup);
                db.AddInParameter(cmd, "@SSSystem", DbType.Boolean, setting.SSSystem);

                db.ExecuteNonQuery(cmd);
            }

            return setting;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Settings table.
        /// </summary>
        /// <returns>A collection of Setting objects.</returns>		
        public List<Setting> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem] " +
                "FROM dbo.Settings ";

            List<Setting> result = new List<Setting>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Setting
                        Setting setting = new Setting();

                        // Read values.
                        setting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        setting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        setting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        setting.Description = base.GetDataValue<string>(dr, "Description");
                        setting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        setting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");

                        // Add to List.
                        result.Add(setting);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Updates an existing row in the Settings table.
        /// </summary>
        /// <param name="setting">A Setting entity object.</param>
        public void UpdateById(Setting setting)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Settings " +
                "SET " +
                    "[SSValue]=@SSValue, " +
                    "[SSValueType]=@SSValueType, " +
                    "[Description]=@Description, " +
                    "[SGroup]=@SGroup, " +
                    "[SSSystem]=@SSSystem " +
                "WHERE [SSKey]=@SSKey ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SSValue", DbType.AnsiString, setting.SSValue);
                db.AddInParameter(cmd, "@SSValueType", DbType.AnsiString, setting.SSValueType);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, setting.Description);
                db.AddInParameter(cmd, "@SGroup", DbType.Int32, setting.SGroup);
                db.AddInParameter(cmd, "@SSSystem", DbType.Boolean, setting.SSSystem);
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, setting.SSKey);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Settings table.
        /// </summary>
        /// <param name="sSKey">A sSKey value.</param>
        public void DeleteById(string sSKey)
        {
            const string SQL_STATEMENT = "DELETE dbo.Settings " +
                                         "WHERE [SSKey]=@SSKey ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.

                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, sSKey);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Settings table.
        /// </summary>
        /// <param name="sSKey">A SSKey value.</param>
        /// <returns>A Setting object with data populated from the database.</returns>
        public Setting SelectById(string sSKey)
        {
            const string SQL_STATEMENT =
                "SELECT [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem] " +
                "FROM dbo.Settings  " +
                "WHERE [SSKey]=@SSKey ";

            Setting setting = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, sSKey);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Setting
                        setting = new Setting();

                        // Read values.
                        setting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        setting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        setting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        setting.Description = base.GetDataValue<string>(dr, "Description");
                        setting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        setting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");
                    }
                }
            }

            return setting;
        }
    }
}
