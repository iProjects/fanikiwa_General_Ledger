//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/27/2014 07:50:58 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// TieredTable data access component. Manages CRUD operations for the TieredTable table.
    /// </summary>
    public partial class TieredTableDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TieredTable table.
        /// </summary>
        /// <param name="tieredTable">A TieredTable object.</param>
        /// <returns>An updated TieredTable object.</returns>
        public TieredTable Create(TieredTable tieredTable)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TieredTable ([Description]) " +
                "VALUES(@Description); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, tieredTable.Description);

                // Get the primary key value.
                tieredTable.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return tieredTable;
        }

        /// <summary>
        /// Updates an existing row in the TieredTable table.
        /// </summary>
        /// <param name="tieredTable">A TieredTable entity object.</param>
        public void UpdateById(TieredTable tieredTable)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TieredTable " +
                "SET " +
                    "[Description]=@Description " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, tieredTable.Description);
                db.AddInParameter(cmd, "@Id", DbType.Int32, tieredTable.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TieredTable table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TieredTable " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TieredTable table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A TieredTable object with data populated from the database.</returns>
        public TieredTable SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Description] " +
                "FROM dbo.TieredTable  " +
                "WHERE [Id]=@Id ";

            TieredTable tieredTable = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TieredTable
                        tieredTable = new TieredTable();

                        // Read values.
                        tieredTable.Id = base.GetDataValue<int>(dr, "Id");
                        tieredTable.Description = base.GetDataValue<string>(dr, "Description");
                    }
                }
            }

            return tieredTable;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TieredTable table.
        /// </summary>
        /// <returns>A collection of TieredTable objects.</returns>		
        public List<TieredTable> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Description] " +
                "FROM dbo.TieredTable ";

            List<TieredTable> result = new List<TieredTable>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TieredTable
                        TieredTable tieredTable = new TieredTable();

                        // Read values.
                        tieredTable.Id = base.GetDataValue<int>(dr, "Id");
                        tieredTable.Description = base.GetDataValue<string>(dr, "Description");

                        // Add to List.
                        result.Add(tieredTable);
                    }
                }
            }

            return result;
        }
    }
}

