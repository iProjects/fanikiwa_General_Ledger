//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/10/2014 14:43:17 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// ValueDatedTransactions data access component. Manages CRUD operations for the ValueDatedTransactions table.
    /// </summary>
    public partial class ValueDatedTransactionDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ValueDatedTransactions table.
        /// </summary>
        /// <param name="valueDatedTransaction">A ValueDatedTransaction object.</param>
        /// <returns>An updated ValueDatedTransaction object.</returns>
        public ValueDatedTransaction Create(ValueDatedTransaction valueDatedTransaction)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ValueDatedTransactions ([TransactionTypeId], [AccountID], [Amount], [PostDate], [RecordDate], [ValueDate], [Narrative], [ForcePostFlag], [StatementFlag], [Authorizer], [UserID]) " +
                "VALUES(@TransactionTypeId, @AccountID, @Amount, @PostDate, @RecordDate, @ValueDate, @Narrative, @ForcePostFlag, @StatementFlag, @Authorizer, @UserID); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionTypeId", DbType.Int32, valueDatedTransaction.TransactionTypeId);
                db.AddInParameter(cmd, "@AccountID", DbType.Int32, valueDatedTransaction.AccountID);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, valueDatedTransaction.Amount);
                db.AddInParameter(cmd, "@PostDate", DbType.DateTime2, valueDatedTransaction.PostDate);
                db.AddInParameter(cmd, "@RecordDate", DbType.DateTime2, valueDatedTransaction.RecordDate);
                db.AddInParameter(cmd, "@ValueDate", DbType.DateTime2, valueDatedTransaction.ValueDate);
                db.AddInParameter(cmd, "@Narrative", DbType.String, valueDatedTransaction.Narrative);
                db.AddInParameter(cmd, "@ForcePostFlag", DbType.Boolean, valueDatedTransaction.ForcePostFlag);
                db.AddInParameter(cmd, "@StatementFlag", DbType.String, valueDatedTransaction.StatementFlag);
                db.AddInParameter(cmd, "@Authorizer", DbType.String, valueDatedTransaction.Authorizer);
                db.AddInParameter(cmd, "@UserID", DbType.String, valueDatedTransaction.UserID);

                // Get the primary key value.
                valueDatedTransaction.TransactionID = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return valueDatedTransaction;
        }

        /// <summary>
        /// Updates an existing row in the ValueDatedTransactions table.
        /// </summary>
        /// <param name="valueDatedTransaction">A ValueDatedTransaction entity object.</param>
        public void UpdateById(ValueDatedTransaction valueDatedTransaction)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ValueDatedTransactions " +
                "SET " +
                    "[TransactionTypeId]=@TransactionTypeId, " +
                    "[AccountID]=@AccountID, " +
                    "[Amount]=@Amount, " +
                    "[PostDate]=@PostDate, " +
                    "[RecordDate]=@RecordDate, " +
                    "[ValueDate]=@ValueDate, " +
                    "[Narrative]=@Narrative, " +
                    "[ForcePostFlag]=@ForcePostFlag, " +
                    "[StatementFlag]=@StatementFlag, " +
                    "[Authorizer]=@Authorizer, " +
                    "[UserID]=@UserID " +
                "WHERE [TransactionID]=@TransactionID ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionTypeId", DbType.Int32, valueDatedTransaction.TransactionTypeId);
                db.AddInParameter(cmd, "@AccountID", DbType.Int32, valueDatedTransaction.AccountID);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, valueDatedTransaction.Amount);
                db.AddInParameter(cmd, "@PostDate", DbType.DateTime2, valueDatedTransaction.PostDate);
                db.AddInParameter(cmd, "@RecordDate", DbType.DateTime2, valueDatedTransaction.RecordDate);
                db.AddInParameter(cmd, "@ValueDate", DbType.DateTime2, valueDatedTransaction.ValueDate);
                db.AddInParameter(cmd, "@Narrative", DbType.String, valueDatedTransaction.Narrative);
                db.AddInParameter(cmd, "@ForcePostFlag", DbType.Boolean, valueDatedTransaction.ForcePostFlag);
                db.AddInParameter(cmd, "@StatementFlag", DbType.String, valueDatedTransaction.StatementFlag);
                db.AddInParameter(cmd, "@Authorizer", DbType.String, valueDatedTransaction.Authorizer);
                db.AddInParameter(cmd, "@UserID", DbType.String, valueDatedTransaction.UserID);
                db.AddInParameter(cmd, "@TransactionID", DbType.Int32, valueDatedTransaction.TransactionID);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ValueDatedTransactions table.
        /// </summary>
        /// <param name="transactionID">A transactionID value.</param>
        public void DeleteById(int transactionID)
        {
            const string SQL_STATEMENT = "DELETE dbo.ValueDatedTransactions " +
                                         "WHERE [TransactionID]=@TransactionID ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionID", DbType.Int32, transactionID);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ValueDatedTransactions table.
        /// </summary>
        /// <param name="transactionID">A TransactionID value.</param>
        /// <returns>A ValueDatedTransaction object with data populated from the database.</returns>
        public ValueDatedTransaction SelectById(int transactionID)
        {
            const string SQL_STATEMENT =
                "SELECT [TransactionID], [TransactionTypeId], [AccountID], [Amount], [PostDate], [RecordDate]" +
                        ", [ValueDate], [Narrative], [ForcePostFlag], [StatementFlag], [Authorizer], [UserID]" +
                        " " +
                "FROM dbo.ValueDatedTransactions  " +
                "WHERE [TransactionID]=@TransactionID ";

            ValueDatedTransaction valueDatedTransaction = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TransactionID", DbType.Int32, transactionID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ValueDatedTransaction
                        valueDatedTransaction = new ValueDatedTransaction();

                        // Read values.
                        valueDatedTransaction.TransactionID = base.GetDataValue<int>(dr, "TransactionID");
                        valueDatedTransaction.TransactionTypeId = base.GetDataValue<int>(dr, "TransactionTypeId");
                        valueDatedTransaction.AccountID = base.GetDataValue<int>(dr, "AccountID");
                        valueDatedTransaction.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        valueDatedTransaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        valueDatedTransaction.RecordDate = base.GetDataValue<DateTime>(dr, "RecordDate");
                        valueDatedTransaction.ValueDate = base.GetDataValue<DateTime>(dr, "ValueDate");
                        valueDatedTransaction.Narrative = base.GetDataValue<string>(dr, "Narrative");
                        valueDatedTransaction.ForcePostFlag = base.GetDataValue<bool>(dr, "ForcePostFlag");
                        valueDatedTransaction.StatementFlag = base.GetDataValue<string>(dr, "StatementFlag");
                        valueDatedTransaction.Authorizer = base.GetDataValue<string>(dr, "Authorizer");
                        valueDatedTransaction.UserID = base.GetDataValue<string>(dr, "UserID");
                    }
                }
            }

            return valueDatedTransaction;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ValueDatedTransactions table.
        /// </summary>
        /// <returns>A collection of ValueDatedTransaction objects.</returns>		
        public List<ValueDatedTransaction> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [TransactionID], [TransactionTypeId], [AccountID], [Amount], [PostDate], [RecordDate]" +
                        ", [ValueDate], [Narrative], [ForcePostFlag], [StatementFlag], [Authorizer], [UserID]" +
                        " " +
                "FROM dbo.ValueDatedTransactions ";

            List<ValueDatedTransaction> result = new List<ValueDatedTransaction>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ValueDatedTransaction
                        ValueDatedTransaction valueDatedTransaction = new ValueDatedTransaction();

                        // Read values.
                        valueDatedTransaction.TransactionID = base.GetDataValue<int>(dr, "TransactionID");
                        valueDatedTransaction.TransactionTypeId = base.GetDataValue<int>(dr, "TransactionTypeId");
                        valueDatedTransaction.AccountID = base.GetDataValue<int>(dr, "AccountID");
                        valueDatedTransaction.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        valueDatedTransaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        valueDatedTransaction.RecordDate = base.GetDataValue<DateTime>(dr, "RecordDate");
                        valueDatedTransaction.ValueDate = base.GetDataValue<DateTime>(dr, "ValueDate");
                        valueDatedTransaction.Narrative = base.GetDataValue<string>(dr, "Narrative");
                        valueDatedTransaction.ForcePostFlag = base.GetDataValue<bool>(dr, "ForcePostFlag");
                        valueDatedTransaction.StatementFlag = base.GetDataValue<string>(dr, "StatementFlag");
                        valueDatedTransaction.Authorizer = base.GetDataValue<string>(dr, "Authorizer");
                        valueDatedTransaction.UserID = base.GetDataValue<string>(dr, "UserID");

                        // Add to List.
                        result.Add(valueDatedTransaction);
                    }
                }
            }

            return result;
        }


        public List<ValueDatedTransaction> SelectByValueDate(DateTime valueDate)
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [TransactionID], [TransactionTypeId], [AccountID], [Amount], [PostDate], [RecordDate]" +
                        ", [ValueDate], [Narrative], [ForcePostFlag], [StatementFlag], [Authorizer], [UserID]" +
                        " " +
                "FROM dbo.ValueDatedTransactions " +
                "WHERE  [ValueDate]=@valueDate";

            List<ValueDatedTransaction> result = new List<ValueDatedTransaction>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@valueDate", DbType.DateTime2, valueDate);
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ValueDatedTransaction
                        ValueDatedTransaction valueDatedTransaction = new ValueDatedTransaction();

                        // Read values.
                        valueDatedTransaction.TransactionID = base.GetDataValue<int>(dr, "TransactionID");
                        valueDatedTransaction.TransactionTypeId = base.GetDataValue<int>(dr, "TransactionTypeId");
                        valueDatedTransaction.AccountID = base.GetDataValue<int>(dr, "AccountID");
                        valueDatedTransaction.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        valueDatedTransaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        valueDatedTransaction.RecordDate = base.GetDataValue<DateTime>(dr, "RecordDate");
                        valueDatedTransaction.ValueDate = base.GetDataValue<DateTime>(dr, "ValueDate");
                        valueDatedTransaction.Narrative = base.GetDataValue<string>(dr, "Narrative");
                        valueDatedTransaction.ForcePostFlag = base.GetDataValue<bool>(dr, "ForcePostFlag");
                        valueDatedTransaction.StatementFlag = base.GetDataValue<string>(dr, "StatementFlag");
                        valueDatedTransaction.Authorizer = base.GetDataValue<string>(dr, "Authorizer");
                        valueDatedTransaction.UserID = base.GetDataValue<string>(dr, "UserID");

                        // Add to List.
                        result.Add(valueDatedTransaction);
                    }
                }
            }

            return result;
        }
    }
}

