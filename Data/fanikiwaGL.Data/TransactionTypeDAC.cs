//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/08/2014 18:51:54 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fanikiwaGL.Entities;

namespace fanikiwaGL.Data
{
    /// <summary>
    /// TransactionTypes data access component. Manages CRUD operations for the TransactionTypes table.
    /// </summary>
    public partial class TransactionTypeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TransactionTypes table.
        /// </summary>
        /// <param name="transactionType">A TransactionType object.</param>
        /// <returns>An updated TransactionType object.</returns>
        public TransactionType Create(TransactionType transactionType)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TransactionTypes ([DebitCredit], [ShortCode], [TxnClass], [Description], [DefaultAmount], [AmountExpression], [DefaultMainAccount], [DefaultContraAccount], [NarrativeFlag], [DefaultMainNarrative], [DefaultContraNarrative], [TxnTypeView], [ChargeCommission], [ChargeCommissionToTransaction], [CommissionAmountExpression], [CommissionDrAnotherAccount], [CommissionDrAccount], [CommissionCrAccount], [CommissionTransactionType], [CommissionNarrativeFlag], [CommissionMainNarrative], [CommissionContraNarrative], [CommComputationMethod], [Absolute], [TieredTableId], [CommissionAmount], [DialogFlag], [ForcePost], [StatFlag], [Screen], [ValueDateOffset], [ChargeWho], [DrCommCalcMethod], [CrCommCalcMethod], [CanSuspend], [SuspenseCrAccount], [SuspenseDrAccount], [PrintReceiptPrompt], [PrintReceipt], [ReceiptLayout]) " +
                "VALUES(@DebitCredit, @ShortCode, @TxnClass, @Description, @DefaultAmount, @AmountExpression, @DefaultMainAccount, @DefaultContraAccount, @NarrativeFlag, @DefaultMainNarrative, @DefaultContraNarrative, @TxnTypeView, @ChargeCommission, @ChargeCommissionToTransaction, @CommissionAmountExpression, @CommissionDrAnotherAccount, @CommissionDrAccount, @CommissionCrAccount, @CommissionTransactionType, @CommissionNarrativeFlag, @CommissionMainNarrative, @CommissionContraNarrative, @CommComputationMethod, @Absolute, @TieredTableId, @CommissionAmount, @DialogFlag, @ForcePost, @StatFlag, @Screen, @ValueDateOffset, @ChargeWho, @DrCommCalcMethod, @CrCommCalcMethod, @CanSuspend, @SuspenseCrAccount, @SuspenseDrAccount, @PrintReceiptPrompt, @PrintReceipt, @ReceiptLayout); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@DebitCredit", DbType.AnsiString, transactionType.DebitCredit);
                db.AddInParameter(cmd, "@ShortCode", DbType.String, transactionType.ShortCode);
                db.AddInParameter(cmd, "@TxnClass", DbType.Int16, transactionType.TxnClass);
                db.AddInParameter(cmd, "@Description", DbType.String, transactionType.Description);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionType.DefaultAmount);
                db.AddInParameter(cmd, "@AmountExpression", DbType.AnsiString, transactionType.AmountExpression);
                db.AddInParameter(cmd, "@DefaultMainAccount", DbType.Int32, transactionType.DefaultMainAccount);
                db.AddInParameter(cmd, "@DefaultContraAccount", DbType.Int32, transactionType.DefaultContraAccount);
                db.AddInParameter(cmd, "@NarrativeFlag", DbType.Int16, transactionType.NarrativeFlag);
                db.AddInParameter(cmd, "@DefaultMainNarrative", DbType.String, transactionType.DefaultMainNarrative);
                db.AddInParameter(cmd, "@DefaultContraNarrative", DbType.String, transactionType.DefaultContraNarrative);
                db.AddInParameter(cmd, "@TxnTypeView", DbType.Int16, transactionType.TxnTypeView);
                db.AddInParameter(cmd, "@ChargeCommission", DbType.Boolean, transactionType.ChargeCommission);
                db.AddInParameter(cmd, "@ChargeCommissionToTransaction", DbType.Boolean, transactionType.ChargeCommissionToTransaction);
                db.AddInParameter(cmd, "@CommissionAmountExpression", DbType.AnsiString, transactionType.CommissionAmountExpression);
                db.AddInParameter(cmd, "@CommissionDrAnotherAccount", DbType.Boolean, transactionType.CommissionDrAnotherAccount);
                db.AddInParameter(cmd, "@CommissionDrAccount", DbType.Int32, transactionType.CommissionDrAccount);
                db.AddInParameter(cmd, "@CommissionCrAccount", DbType.Int32, transactionType.CommissionCrAccount);
                db.AddInParameter(cmd, "@CommissionTransactionType", DbType.Int32, transactionType.CommissionTransactionType);
                db.AddInParameter(cmd, "@CommissionNarrativeFlag", DbType.Int16, transactionType.CommissionNarrativeFlag);
                db.AddInParameter(cmd, "@CommissionMainNarrative", DbType.String, transactionType.CommissionMainNarrative);
                db.AddInParameter(cmd, "@CommissionContraNarrative", DbType.String, transactionType.CommissionContraNarrative);
                db.AddInParameter(cmd, "@CommComputationMethod", DbType.String, transactionType.CommComputationMethod);
                db.AddInParameter(cmd, "@Absolute", DbType.Boolean, transactionType.Absolute);
                db.AddInParameter(cmd, "@TieredTableId", DbType.Int32, transactionType.TieredTableId);
                db.AddInParameter(cmd, "@CommissionAmount", DbType.Decimal, transactionType.CommissionAmount);
                db.AddInParameter(cmd, "@DialogFlag", DbType.Int16, transactionType.DialogFlag);
                db.AddInParameter(cmd, "@ForcePost", DbType.Boolean, transactionType.ForcePost);
                db.AddInParameter(cmd, "@StatFlag", DbType.AnsiString, transactionType.StatFlag);
                db.AddInParameter(cmd, "@Screen", DbType.String, transactionType.Screen);
                db.AddInParameter(cmd, "@ValueDateOffset", DbType.Int16, transactionType.ValueDateOffset);
                db.AddInParameter(cmd, "@ChargeWho", DbType.String, transactionType.ChargeWho);
                db.AddInParameter(cmd, "@DrCommCalcMethod", DbType.String, transactionType.DrCommCalcMethod);
                db.AddInParameter(cmd, "@CrCommCalcMethod", DbType.String, transactionType.CrCommCalcMethod);
                db.AddInParameter(cmd, "@CanSuspend", DbType.Boolean, transactionType.CanSuspend);
                db.AddInParameter(cmd, "@SuspenseCrAccount", DbType.Int32, transactionType.SuspenseCrAccount);
                db.AddInParameter(cmd, "@SuspenseDrAccount", DbType.Int32, transactionType.SuspenseDrAccount);
                db.AddInParameter(cmd, "@PrintReceiptPrompt", DbType.Boolean, transactionType.PrintReceiptPrompt);
                db.AddInParameter(cmd, "@PrintReceipt", DbType.Boolean, transactionType.PrintReceipt);
                db.AddInParameter(cmd, "@ReceiptLayout", DbType.String, transactionType.ReceiptLayout);

                // Get the primary key value.
                transactionType.TransactionTypeID = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return transactionType;
        }

        /// <summary>
        /// Updates an existing row in the TransactionTypes table.
        /// </summary>
        /// <param name="transactionType">A TransactionType entity object.</param>
        public void UpdateById(TransactionType transactionType)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TransactionTypes " +
                "SET " +
                    "[DebitCredit]=@DebitCredit, " +
                    "[ShortCode]=@ShortCode, " +
                    "[TxnClass]=@TxnClass, " +
                    "[Description]=@Description, " +
                    "[DefaultAmount]=@DefaultAmount, " +
                    "[AmountExpression]=@AmountExpression, " +
                    "[DefaultMainAccount]=@DefaultMainAccount, " +
                    "[DefaultContraAccount]=@DefaultContraAccount, " +
                    "[NarrativeFlag]=@NarrativeFlag, " +
                    "[DefaultMainNarrative]=@DefaultMainNarrative, " +
                    "[DefaultContraNarrative]=@DefaultContraNarrative, " +
                    "[TxnTypeView]=@TxnTypeView, " +
                    "[ChargeCommission]=@ChargeCommission, " +
                    "[ChargeCommissionToTransaction]=@ChargeCommissionToTransaction, " +
                    "[CommissionAmountExpression]=@CommissionAmountExpression, " +
                    "[CommissionDrAnotherAccount]=@CommissionDrAnotherAccount, " +
                    "[CommissionDrAccount]=@CommissionDrAccount, " +
                    "[CommissionCrAccount]=@CommissionCrAccount, " +
                    "[CommissionTransactionType]=@CommissionTransactionType, " +
                    "[CommissionNarrativeFlag]=@CommissionNarrativeFlag, " +
                    "[CommissionMainNarrative]=@CommissionMainNarrative, " +
                    "[CommissionContraNarrative]=@CommissionContraNarrative, " +
                    "[CommComputationMethod]=@CommComputationMethod, " +
                    "[Absolute]=@Absolute, " +
                    "[TieredTableId]=@TieredTableId, " +
                    "[CommissionAmount]=@CommissionAmount, " +
                    "[DialogFlag]=@DialogFlag, " +
                    "[ForcePost]=@ForcePost, " +
                    "[StatFlag]=@StatFlag, " +
                    "[Screen]=@Screen, " +
                    "[ValueDateOffset]=@ValueDateOffset, " +
                    "[ChargeWho]=@ChargeWho, " +
                    "[DrCommCalcMethod]=@DrCommCalcMethod, " +
                    "[CrCommCalcMethod]=@CrCommCalcMethod, " +
                    "[CanSuspend]=@CanSuspend, " +
                    "[SuspenseCrAccount]=@SuspenseCrAccount, " +
                    "[SuspenseDrAccount]=@SuspenseDrAccount, " +
                    "[PrintReceiptPrompt]=@PrintReceiptPrompt, " +
                    "[PrintReceipt]=@PrintReceipt, " +
                    "[ReceiptLayout]=@ReceiptLayout " +
                "WHERE [TransactionTypeID]=@TransactionTypeID ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@DebitCredit", DbType.AnsiString, transactionType.DebitCredit);
                db.AddInParameter(cmd, "@ShortCode", DbType.String, transactionType.ShortCode);
                db.AddInParameter(cmd, "@TxnClass", DbType.Int16, transactionType.TxnClass);
                db.AddInParameter(cmd, "@Description", DbType.String, transactionType.Description);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionType.DefaultAmount);
                db.AddInParameter(cmd, "@AmountExpression", DbType.AnsiString, transactionType.AmountExpression);
                db.AddInParameter(cmd, "@DefaultMainAccount", DbType.Int32, transactionType.DefaultMainAccount);
                db.AddInParameter(cmd, "@DefaultContraAccount", DbType.Int32, transactionType.DefaultContraAccount);
                db.AddInParameter(cmd, "@NarrativeFlag", DbType.Int16, transactionType.NarrativeFlag);
                db.AddInParameter(cmd, "@DefaultMainNarrative", DbType.String, transactionType.DefaultMainNarrative);
                db.AddInParameter(cmd, "@DefaultContraNarrative", DbType.String, transactionType.DefaultContraNarrative);
                db.AddInParameter(cmd, "@TxnTypeView", DbType.Int16, transactionType.TxnTypeView);
                db.AddInParameter(cmd, "@ChargeCommission", DbType.Boolean, transactionType.ChargeCommission);
                db.AddInParameter(cmd, "@ChargeCommissionToTransaction", DbType.Boolean, transactionType.ChargeCommissionToTransaction);
                db.AddInParameter(cmd, "@CommissionAmountExpression", DbType.AnsiString, transactionType.CommissionAmountExpression);
                db.AddInParameter(cmd, "@CommissionDrAnotherAccount", DbType.Boolean, transactionType.CommissionDrAnotherAccount);
                db.AddInParameter(cmd, "@CommissionDrAccount", DbType.Int32, transactionType.CommissionDrAccount);
                db.AddInParameter(cmd, "@CommissionCrAccount", DbType.Int32, transactionType.CommissionCrAccount);
                db.AddInParameter(cmd, "@CommissionTransactionType", DbType.Int32, transactionType.CommissionTransactionType);
                db.AddInParameter(cmd, "@CommissionNarrativeFlag", DbType.Int16, transactionType.CommissionNarrativeFlag);
                db.AddInParameter(cmd, "@CommissionMainNarrative", DbType.String, transactionType.CommissionMainNarrative);
                db.AddInParameter(cmd, "@CommissionContraNarrative", DbType.String, transactionType.CommissionContraNarrative);
                db.AddInParameter(cmd, "@CommComputationMethod", DbType.String, transactionType.CommComputationMethod);
                db.AddInParameter(cmd, "@Absolute", DbType.Boolean, transactionType.Absolute);
                db.AddInParameter(cmd, "@TieredTableId", DbType.Int32, transactionType.TieredTableId);
                db.AddInParameter(cmd, "@CommissionAmount", DbType.Decimal, transactionType.CommissionAmount);
                db.AddInParameter(cmd, "@DialogFlag", DbType.Int16, transactionType.DialogFlag);
                db.AddInParameter(cmd, "@ForcePost", DbType.Boolean, transactionType.ForcePost);
                db.AddInParameter(cmd, "@StatFlag", DbType.AnsiString, transactionType.StatFlag);
                db.AddInParameter(cmd, "@Screen", DbType.String, transactionType.Screen);
                db.AddInParameter(cmd, "@ValueDateOffset", DbType.Int16, transactionType.ValueDateOffset);
                db.AddInParameter(cmd, "@ChargeWho", DbType.String, transactionType.ChargeWho);
                db.AddInParameter(cmd, "@DrCommCalcMethod", DbType.String, transactionType.DrCommCalcMethod);
                db.AddInParameter(cmd, "@CrCommCalcMethod", DbType.String, transactionType.CrCommCalcMethod);
                db.AddInParameter(cmd, "@CanSuspend", DbType.Boolean, transactionType.CanSuspend);
                db.AddInParameter(cmd, "@SuspenseCrAccount", DbType.Int32, transactionType.SuspenseCrAccount);
                db.AddInParameter(cmd, "@SuspenseDrAccount", DbType.Int32, transactionType.SuspenseDrAccount);
                db.AddInParameter(cmd, "@PrintReceiptPrompt", DbType.Boolean, transactionType.PrintReceiptPrompt);
                db.AddInParameter(cmd, "@PrintReceipt", DbType.Boolean, transactionType.PrintReceipt);
                db.AddInParameter(cmd, "@ReceiptLayout", DbType.String, transactionType.ReceiptLayout);
                db.AddInParameter(cmd, "@TransactionTypeID", DbType.Int32, transactionType.TransactionTypeID);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TransactionTypes table.
        /// </summary>
        /// <param name="transactionTypeID">A transactionTypeID value.</param>
        public void DeleteById(int transactionTypeID)
        {
            const string SQL_STATEMENT = "DELETE dbo.TransactionTypes " +
                                         "WHERE [TransactionTypeID]=@TransactionTypeID ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionTypeID", DbType.Int32, transactionTypeID);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TransactionTypes table.
        /// </summary>
        /// <param name="transactionTypeID">A TransactionTypeID value.</param>
        /// <returns>A TransactionType object with data populated from the database.</returns>
        public TransactionType SelectById(int transactionTypeID)
        {
            const string SQL_STATEMENT =
                "SELECT [TransactionTypeID], [DebitCredit], [ShortCode], [TxnClass], [Description], [DefaultAmount]" +
                        ", [AmountExpression], [DefaultMainAccount], [DefaultContraAccount], [NarrativeFlag]" +
                        ", [DefaultMainNarrative], [DefaultContraNarrative], [TxnTypeView], [ChargeCommission]" +
                        ", [ChargeCommissionToTransaction], [CommissionAmountExpression], [CommissionDrAnotherAccount]" +
                        ", [CommissionDrAccount], [CommissionCrAccount], [CommissionTransactionType], [CommissionNarrativeFlag]" +
                        ", [CommissionMainNarrative], [CommissionContraNarrative], [CommComputationMethod]" +
                        ", [Absolute], [TieredTableId], [CommissionAmount], [DialogFlag], [ForcePost], [StatFlag]" +
                        ", [Screen], [ValueDateOffset], [ChargeWho], [DrCommCalcMethod], [CrCommCalcMethod]" +
                        ", [CanSuspend], [SuspenseCrAccount], [SuspenseDrAccount], [PrintReceiptPrompt], [PrintReceipt]" +
                        ", [ReceiptLayout] " +
                "FROM dbo.TransactionTypes  " +
                "WHERE [TransactionTypeID]=@TransactionTypeID ";

            TransactionType transactionType = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TransactionTypeID", DbType.Int32, transactionTypeID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TransactionType
                        transactionType = new TransactionType();

                        // Read values.
                        transactionType.TransactionTypeID = base.GetDataValue<int>(dr, "TransactionTypeID");
                        transactionType.DebitCredit = base.GetDataValue<string>(dr, "DebitCredit");
                        transactionType.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        transactionType.TxnClass = base.GetDataValue<short>(dr, "TxnClass");
                        transactionType.Description = base.GetDataValue<string>(dr, "Description");
                        transactionType.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionType.AmountExpression = base.GetDataValue<string>(dr, "AmountExpression");
                        transactionType.DefaultMainAccount = base.GetDataValue<int>(dr, "DefaultMainAccount");
                        transactionType.DefaultContraAccount = base.GetDataValue<int>(dr, "DefaultContraAccount");
                        transactionType.NarrativeFlag = base.GetDataValue<short>(dr, "NarrativeFlag");
                        transactionType.DefaultMainNarrative = base.GetDataValue<string>(dr, "DefaultMainNarrative");
                        transactionType.DefaultContraNarrative = base.GetDataValue<string>(dr, "DefaultContraNarrative");
                        transactionType.TxnTypeView = base.GetDataValue<short>(dr, "TxnTypeView");
                        transactionType.ChargeCommission = base.GetDataValue<bool>(dr, "ChargeCommission");
                        transactionType.ChargeCommissionToTransaction = base.GetDataValue<bool>(dr, "ChargeCommissionToTransaction");
                        transactionType.CommissionAmountExpression = base.GetDataValue<string>(dr, "CommissionAmountExpression");
                        transactionType.CommissionDrAnotherAccount = base.GetDataValue<bool>(dr, "CommissionDrAnotherAccount");
                        transactionType.CommissionDrAccount = base.GetDataValue<int>(dr, "CommissionDrAccount");
                        transactionType.CommissionCrAccount = base.GetDataValue<int>(dr, "CommissionCrAccount");
                        transactionType.CommissionTransactionType = base.GetDataValue<int>(dr, "CommissionTransactionType");
                        transactionType.CommissionNarrativeFlag = base.GetDataValue<short>(dr, "CommissionNarrativeFlag");
                        transactionType.CommissionMainNarrative = base.GetDataValue<string>(dr, "CommissionMainNarrative");
                        transactionType.CommissionContraNarrative = base.GetDataValue<string>(dr, "CommissionContraNarrative");
                        transactionType.CommComputationMethod = base.GetDataValue<string>(dr, "CommComputationMethod");
                        transactionType.Absolute = base.GetDataValue<bool>(dr, "Absolute");
                        transactionType.TieredTableId = base.GetDataValue<int>(dr, "TieredTableId");
                        transactionType.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        transactionType.DialogFlag = base.GetDataValue<short>(dr, "DialogFlag");
                        transactionType.ForcePost = base.GetDataValue<bool>(dr, "ForcePost");
                        transactionType.StatFlag = base.GetDataValue<string>(dr, "StatFlag");
                        transactionType.Screen = base.GetDataValue<string>(dr, "Screen");
                        transactionType.ValueDateOffset = base.GetDataValue<short>(dr, "ValueDateOffset");
                        transactionType.ChargeWho = base.GetDataValue<string>(dr, "ChargeWho");
                        transactionType.DrCommCalcMethod = base.GetDataValue<string>(dr, "DrCommCalcMethod");
                        transactionType.CrCommCalcMethod = base.GetDataValue<string>(dr, "CrCommCalcMethod");
                        transactionType.CanSuspend = base.GetDataValue<bool>(dr, "CanSuspend");
                        transactionType.SuspenseCrAccount = base.GetDataValue<int>(dr, "SuspenseCrAccount");
                        transactionType.SuspenseDrAccount = base.GetDataValue<int>(dr, "SuspenseDrAccount");
                        transactionType.PrintReceiptPrompt = base.GetDataValue<bool>(dr, "PrintReceiptPrompt");
                        transactionType.PrintReceipt = base.GetDataValue<bool>(dr, "PrintReceipt");
                        transactionType.ReceiptLayout = base.GetDataValue<string>(dr, "ReceiptLayout");
                    }
                }
            }

            return transactionType;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TransactionTypes table.
        /// </summary>
        /// <returns>A collection of TransactionType objects.</returns>		
        public List<TransactionType> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [TransactionTypeID], [DebitCredit], [ShortCode], [TxnClass], [Description], [DefaultAmount]" +
                        ", [AmountExpression], [DefaultMainAccount], [DefaultContraAccount], [NarrativeFlag]" +
                        ", [DefaultMainNarrative], [DefaultContraNarrative], [TxnTypeView], [ChargeCommission]" +
                        ", [ChargeCommissionToTransaction], [CommissionAmountExpression], [CommissionDrAnotherAccount]" +
                        ", [CommissionDrAccount], [CommissionCrAccount], [CommissionTransactionType], [CommissionNarrativeFlag]" +
                        ", [CommissionMainNarrative], [CommissionContraNarrative], [CommComputationMethod]" +
                        ", [Absolute], [TieredTableId], [CommissionAmount], [DialogFlag], [ForcePost], [StatFlag]" +
                        ", [Screen], [ValueDateOffset], [ChargeWho], [DrCommCalcMethod], [CrCommCalcMethod]" +
                        ", [CanSuspend], [SuspenseCrAccount], [SuspenseDrAccount], [PrintReceiptPrompt], [PrintReceipt]" +
                        ", [ReceiptLayout] " +
                "FROM dbo.TransactionTypes ";

            List<TransactionType> result = new List<TransactionType>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TransactionType
                        TransactionType transactionType = new TransactionType();

                        // Read values.
                        transactionType.TransactionTypeID = base.GetDataValue<int>(dr, "TransactionTypeID");
                        transactionType.DebitCredit = base.GetDataValue<string>(dr, "DebitCredit");
                        transactionType.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        transactionType.TxnClass = base.GetDataValue<short>(dr, "TxnClass");
                        transactionType.Description = base.GetDataValue<string>(dr, "Description");
                        transactionType.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionType.AmountExpression = base.GetDataValue<string>(dr, "AmountExpression");
                        transactionType.DefaultMainAccount = base.GetDataValue<int>(dr, "DefaultMainAccount");
                        transactionType.DefaultContraAccount = base.GetDataValue<int>(dr, "DefaultContraAccount");
                        transactionType.NarrativeFlag = base.GetDataValue<short>(dr, "NarrativeFlag");
                        transactionType.DefaultMainNarrative = base.GetDataValue<string>(dr, "DefaultMainNarrative");
                        transactionType.DefaultContraNarrative = base.GetDataValue<string>(dr, "DefaultContraNarrative");
                        transactionType.TxnTypeView = base.GetDataValue<short>(dr, "TxnTypeView");
                        transactionType.ChargeCommission = base.GetDataValue<bool>(dr, "ChargeCommission");
                        transactionType.ChargeCommissionToTransaction = base.GetDataValue<bool>(dr, "ChargeCommissionToTransaction");
                        transactionType.CommissionAmountExpression = base.GetDataValue<string>(dr, "CommissionAmountExpression");
                        transactionType.CommissionDrAnotherAccount = base.GetDataValue<bool>(dr, "CommissionDrAnotherAccount");
                        transactionType.CommissionDrAccount = base.GetDataValue<int>(dr, "CommissionDrAccount");
                        transactionType.CommissionCrAccount = base.GetDataValue<int>(dr, "CommissionCrAccount");
                        transactionType.CommissionTransactionType = base.GetDataValue<int>(dr, "CommissionTransactionType");
                        transactionType.CommissionNarrativeFlag = base.GetDataValue<short>(dr, "CommissionNarrativeFlag");
                        transactionType.CommissionMainNarrative = base.GetDataValue<string>(dr, "CommissionMainNarrative");
                        transactionType.CommissionContraNarrative = base.GetDataValue<string>(dr, "CommissionContraNarrative");
                        transactionType.CommComputationMethod = base.GetDataValue<string>(dr, "CommComputationMethod");
                        transactionType.Absolute = base.GetDataValue<bool>(dr, "Absolute");
                        transactionType.TieredTableId = base.GetDataValue<int>(dr, "TieredTableId");
                        transactionType.CommissionAmount = base.GetDataValue<decimal>(dr, "CommissionAmount");
                        transactionType.DialogFlag = base.GetDataValue<short>(dr, "DialogFlag");
                        transactionType.ForcePost = base.GetDataValue<bool>(dr, "ForcePost");
                        transactionType.StatFlag = base.GetDataValue<string>(dr, "StatFlag");
                        transactionType.Screen = base.GetDataValue<string>(dr, "Screen");
                        transactionType.ValueDateOffset = base.GetDataValue<short>(dr, "ValueDateOffset");
                        transactionType.ChargeWho = base.GetDataValue<string>(dr, "ChargeWho");
                        transactionType.DrCommCalcMethod = base.GetDataValue<string>(dr, "DrCommCalcMethod");
                        transactionType.CrCommCalcMethod = base.GetDataValue<string>(dr, "CrCommCalcMethod");
                        transactionType.CanSuspend = base.GetDataValue<bool>(dr, "CanSuspend");
                        transactionType.SuspenseCrAccount = base.GetDataValue<int>(dr, "SuspenseCrAccount");
                        transactionType.SuspenseDrAccount = base.GetDataValue<int>(dr, "SuspenseDrAccount");
                        transactionType.PrintReceiptPrompt = base.GetDataValue<bool>(dr, "PrintReceiptPrompt");
                        transactionType.PrintReceipt = base.GetDataValue<bool>(dr, "PrintReceipt");
                        transactionType.ReceiptLayout = base.GetDataValue<string>(dr, "ReceiptLayout");

                        // Add to List.
                        result.Add(transactionType);
                    }
                }
            }

            return result;
        }
    }
}

