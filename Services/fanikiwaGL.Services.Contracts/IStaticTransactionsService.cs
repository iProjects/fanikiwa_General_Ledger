//====================================================================================================
// Code generated with Velocity: SL Gen (Build 2.4.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 10/21/2013 17:39:09 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ServiceModel;
using fanikiwaGL.Entities;
using fanikiwaGL.Framework;
using fanikiwaGL.Framework.ExceptionTypes;

namespace fanikiwaGL.Services.Contracts
{
    /// <summary>
    /// Service contract for StaticTransactionsService.
    /// </summary>
    [ServiceContract]
    public interface IStaticTransactionsService
    {

        [OperationContract]
        Decimal AvailableBalance(Account account);

        [OperationContract]
        Decimal GetAvailableBalance(int accountid);

        [OperationContract]
        Decimal GetAccountLimitAmount(int accountid);

        [OperationContract]
        void BlockFunds(Account account, Decimal amount);

        [OperationContract]
        void ClearEffects(Account account, Decimal amount);

        [OperationContract]
        void CloseAccount(Account account);

        [OperationContract]
        Customer CreateCustomer(Customer customer);

        [OperationContract]
        Account GetAccount(int accountID);

        [OperationContract]
        AccountLimitStatus GetAccountLimitStatus(Account act);

        [OperationContract]
        PassFlag GetAccountLockStatus(Account act);

        [OperationContract]
        List<Transaction> GetAccountTransactionsByDate(int accountId, DateTime startDate, DateTime endtDate);

        [OperationContract]
        Customer GetCustomerByEmail(string email);

        [OperationContract]
        Customer GetCustomerByID(int id);

        [OperationContract]
        void MarkLimit(Account account, Decimal amount);

        [OperationContract]
        Account OpenAccount(Account account);

        [OperationContract]
        void SetAccountLimitStatus(Account acc, AccountLimitStatus status);

        [OperationContract]
        void SetAccountLockStatus(Account acc, PassFlag status);

        [OperationContract]
        void UnBlockFunds(Account account, Decimal amount);

        [OperationContract]
        void UpdateAccount(Account account);

        [OperationContract]
        Customer UpdateCustomer(Customer customer);

        [OperationContract]
        List<Account> GetAllAccounts();

        [OperationContract]
        List<Account> GetOpenAccounts();

        [OperationContract]
        List<Account> GetClosedAccounts();

        [OperationContract]
        List<TransactionType> GetAllTransactionTypes();

        [OperationContract]
        TransactionType GetTransactionType(int transactiontypeid);

        [OperationContract]
        List<TieredDet> GetTieredTable(int tieredID);

        [OperationContract]
        bool IsAccountClosed(int accountid);

        [OperationContract]
        List<Transaction> GetAllTransactions();

        [OperationContract]
        List<Transaction> GetAccountTransactions(int _accountid);

        [OperationContract]
        List<Customer> GetAllCustomers();

        [OperationContract]
        List<TransactionModel> GetAccountViewTransactionsByDate(int accountId, DateTime startDate, DateTime endtDate);

        [OperationContract]
        TransactionType CreateTransactionType(TransactionType TransactionType);

        [OperationContract]
        TransactionType UpdateTransactionType(TransactionType TransactionType);

        [OperationContract]
        bool AccountExists(int account);

        [OperationContract]
        List<Transaction> SelectLastTranscations(int accountID, int Take);

        [OperationContract]
        List<Transaction> SelectByAccountDateRange(int accountID, DateTime startDate, DateTime endDate);

    }
}
