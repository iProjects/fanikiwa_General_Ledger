//====================================================================================================
// Code generated with Velocity: SL Gen (Build 2.4.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 10/21/2013 17:39:09 
//====================================================================================================
 
using System;
using System.Collections.Generic; 
using System.Collections.ObjectModel;
using System.Configuration;
using System.Diagnostics; 
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel; 
using System.Text;
using System.Threading.Tasks; 
using fanikiwaGL.Business;
using fanikiwaGL.Data;
using fanikiwaGL.Entities; 
using fanikiwaGL.Framework;
using fanikiwaGL.Framework.ExceptionHandlers; 
using fanikiwaGL.Framework.ExceptionTypes;
using fanikiwaGL.Services; 
using fanikiwaGL.Services.Contracts;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data; 
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.Logging;

namespace fanikiwaGL.Services
{
    /// <summary>
    /// StaticTransactions service component.
    /// </summary>
    public class StaticTransactionsService : IStaticTransactionsService
    {
        #region "Constructor"
        public StaticTransactionsService()
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            IConfigurationSource config = ConfigurationSourceFactory.Create();
            ExceptionPolicyFactory factory = new ExceptionPolicyFactory(config);
            Logger.SetLogWriter(new LogWriterFactory(config).Create(), false);
            ExceptionManager exManager = factory.CreateManager();
            ExceptionPolicy.SetExceptionManager(factory.CreateManager(), false);
        }
        #endregion "Constructor"

        /// <summary>
        /// Calls the AvailableBalance business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a Decimal object.</returns>
        public Decimal AvailableBalance(Account account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAvailableBalance(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("AvailableBalance"));
                }
                return 0;
            }
        }

        /// <summary>
        /// Calls the GetAvailableBalance business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a Decimal object.</returns>
        public Decimal GetAvailableBalance(int account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAvailableBalance(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAvailableBalance"));
                }
                return 0;
            }
        }

        /// <summary>
        /// Calls the GetAccountLimitAmount business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a Decimal object.</returns>
        public Decimal GetAccountLimitAmount(int account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountLimitAmount(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountLimitAmount"));
                }
                return 0;
            }
        }

        /// <summary>
        /// Calls the IsAccountClosed business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a bool object.</returns>
        public bool IsAccountClosed(int accountid)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.IsAccountClosed(accountid);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("IsAccountClosed"));
                }
                return false;
            }
        }

        /// <summary>
        /// Calls the BlockFunds business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <param name="amount"> A amount value.</param>
        public void BlockFunds(Account account, Decimal amount)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.BlockFunds(account, amount);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("BlockFunds"));
                }

            }
        }

        /// <summary>
        /// Calls the ClearEffects business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <param name="amount"> A amount value.</param>
        public void ClearEffects(Account account, Decimal amount)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.ClearEffects(account, amount);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("ClearEffects"));
                }
            }
        }

        /// <summary>
        /// Calls the CloseAccount business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        public void CloseAccount(Account account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.CloseAccount(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("CloseAccount"));
                }
            }
        }

        /// <summary>
        /// Calls the CreateCustomer business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="customer"> A customer value.</param>
        /// <returns>Returns a Customer object.</returns>
        public Customer CreateCustomer(Customer customer)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.CreateCustomer(customer);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("CreateCustomer"));
                }

                return customer;
            }
        }

        /// <summary>
        /// Calls the GetAccount business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="accountID"> A accountID value.</param>
        /// <returns>Returns a Account object.</returns>
        public Account GetAccount(int accountID)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccount(accountID);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccount"));
                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAccountLimitStatus business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="act"> A act value.</param>
        /// <returns>Returns a AccountStatus object.</returns>
        public AccountLimitStatus GetAccountLimitStatus(Account act)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountLimitStatus(act);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountLimitStatus"));
                }

                return AccountLimitStatus.Unknown;
            }
        }

        /// <summary>
        /// Calls the GetAccountLockStatus business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="act"> A act value.</param>
        /// <returns>Returns a AccountStatus object.</returns>
        public PassFlag GetAccountLockStatus(Account act)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountLockStatus(act);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountLockStatus"));
                }

                return PassFlag.Unknown;
            }
        }

        /// <summary>
        /// Calls the GetAccountTransactions business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="accountId"> A accountId value.</param>
        /// <param name="startDate"> A startDate value.</param>
        /// <param name="endtDate"> A endtDate value.</param>
        /// <returns>Returns a List<Transaction> object.</returns>
        public List<Transaction> GetAccountTransactionsByDate(int accountId, DateTime startDate, DateTime endtDate)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountTransactionsByDate(accountId, startDate, endtDate);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountTransactions"));
                }

                return null;
            }
        }


        /// <summary>
        /// Calls the GetCustomerByEmail business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="email"> A email value.</param>
        /// <returns>Returns a Customer object.</returns>
        public Customer GetCustomerByID(int Id)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetCustomerByID(Id);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetCustomerByID"));
                }
                return null;
            }
        }


        /// <summary>
        /// Calls the GetCustomerByEmail business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="email"> A email value.</param>
        /// <returns>Returns a Customer object.</returns>
        public Customer GetCustomerByEmail(string email)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetCustomerByEmail(email);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetCustomerByEmail"));
                }
                return null;
            }
        }

        /// <summary>
        /// Calls the MarkLimit business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <param name="amount"> A amount value.</param>
        public void MarkLimit(Account account, Decimal amount)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.MarkLimit(account, amount);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("MarkLimit"));
                }
            }
        }

        /// <summary>
        /// Calls the OpenAccount business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a Account object.</returns>
        public Account OpenAccount(Account account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.OpenAccount(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("OpenAccount"));
                }
                return null;
            }
        }

        /// <summary>
        /// Calls the SetAccountLimitStatus business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="acc"> A acc value.</param>
        /// <param name="status"> A status value.</param>
        public void SetAccountLimitStatus(Account acc, AccountLimitStatus status)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.SetAccountLimitStatus(acc, status);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SetAccountLimitStatus"));
                }
            }
        }

        /// <summary>
        /// Calls the SetAccountLockStatus business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="acc"> A acc value.</param>
        /// <param name="status"> A status value.</param>
        public void SetAccountLockStatus(Account acc,  PassFlag status)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.SetAccountLockStatus(acc, status);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SetAccountLockStatus"));
                }
            }
        }

        /// <summary>
        /// Calls the UnBlockFunds business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <param name="amount"> A amount value.</param>
        public void UnBlockFunds(Account account, Decimal amount)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.UnBlockFunds(account, amount);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("UnBlockFunds"));
                }
            }
        }

        /// <summary>
        /// Calls the UpdateAccount business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        public void UpdateAccount(Account account)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                bc.UpdateAccount(account);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("UpdateAccount"));
                }
            }
        }

        /// <summary>
        /// Calls the UpdateCustomer business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="customer"> A customer value.</param>
        /// <returns>Returns a Customer object.</returns>
        public Customer UpdateCustomer(Customer customer)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.UpdateCustomer(customer);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("UpdateCustomer"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAllAccounts business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<Account> object.</returns>
        public List<Account> GetAllAccounts()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAllAccounts();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAllAccounts"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetOpenAccounts business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<Account> object.</returns>
        public List<Account> GetOpenAccounts()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetOpenAccounts();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetOpenAccounts"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetClosedAccounts business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<Account> object.</returns>
        public List<Account> GetClosedAccounts()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetClosedAccounts();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetClosedAccounts"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAllTransactionTypes business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<TransactionType> object.</returns>
        public List<TransactionType> GetAllTransactionTypes()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAllTransactionTypes();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAllTransactionTypes"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetTransactionType business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  TransactionType object.</returns>
        public TransactionType GetTransactionType(int id)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetTransactionType(id);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetTransactionType"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetTieredCommissionRate business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  decimal TieredCommissionRate object.</returns>
        //public decimal GetTieredCommissionRate(int tieredID, decimal amount)
        //{
        //    try
        //    {
        //        StaticTransactionsComponent bc = new StaticTransactionsComponent();
        //        return bc.GetTieredCommissionRate(tieredID, amount);
        //    }
        //    catch (Exception ex)
        //    {
        //        // TODO: Handle your exceptions here. Remove any try-catch blocks if you
        //        //       are not handling any exceptions. 

        //        bool rethrow = false;
        //        rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
        //        if (rethrow)
        //        {
        //            CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
        //            throw new FaultException<CustomExpMsg>(customMsg,
        //                new FaultReason(customMsg.ErrorMsg),
        //                new FaultCode("GetTieredCommissionRate"));

        //        }
        //        return 0;
        //    }
        //}

        /// <summary>
        /// Calls the GetTieredDet business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  TieredDet object.</returns>
        //public TieredDet GetTieredDet(int tieredID, decimal amount)
        //{
        //    try
        //    {
        //        StaticTransactionsComponent bc = new StaticTransactionsComponent();
        //        return bc.GetTieredDet(tieredID, amount);
        //    }
        //    catch (Exception ex)
        //    {
        //        // TODO: Handle your exceptions here. Remove any try-catch blocks if you
        //        //       are not handling any exceptions. 

        //        bool rethrow = false;
        //        rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
        //        if (rethrow)
        //        {
        //            CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
        //            throw new FaultException<CustomExpMsg>(customMsg,
        //                new FaultReason(customMsg.ErrorMsg),
        //                new FaultCode("GetTieredDet"));

        //        }
        //        return null;
        //    }
        //}

        /// <summary>
        /// Calls the GetTieredTable business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  TieredDet object.</returns>
        public List<TieredDet> GetTieredTable(int tieredID)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetTieredTable(tieredID);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetTieredTable"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAllTransactions business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  Transaction object.</returns>
        public List<Transaction> GetAllTransactions()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAllTransactions();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAllTransactions"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAccountTransactions business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<Transaction> object.</returns>
        public List<Transaction> GetAccountTransactions(int _accountid)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountTransactions(_accountid);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountTransactions"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAllCustomers business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<Customer> object.</returns>
        public List<Customer> GetAllCustomers()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAllCustomers();
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAllCustomers"));

                }
                return null;
            }
        }

        /// <summary>
        /// Calls the GetAccountViewTransactionsByDate business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  List<TransactionModel> object.</returns>
        public List<TransactionModel> GetAccountViewTransactionsByDate(int accountId, DateTime startDate, DateTime endtDate)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.GetAccountViewTransactionsByDate(accountId, startDate, endtDate);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("GetAccountViewTransactionsByDate"));

                }
                return null;
            }
        }
        /// <summary>
        /// Calls the CreateTransactionType business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="customer"> A TransactionType value.</param>
        /// <returns>Returns a TransactionType object.</returns>
        public TransactionType CreateTransactionType(TransactionType TransactionType)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.CreateTransactionType(TransactionType);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("CreateTransactionType"));
                }
            }
            return null;
        }

        /// <summary>
        /// Calls the UpdateTransactionType business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="customer"> A TransactionType value.</param>
        /// <returns>Returns a TransactionType object.</returns>
        public TransactionType UpdateTransactionType(TransactionType TransactionType)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.UpdateTransactionType(TransactionType);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("UpdateTransactionType"));
                }
            }
            return null;
        }
        /// <summary>
        /// Calls the AccountExists business method of the StaticTransactionsComponent.
        /// </summary>
        /// <param name="account"> A account value.</param>
        /// <returns>Returns a Boolean object.</returns>
        public bool AccountExists(int account)
        {

            StaticTransactionsComponent bc = new StaticTransactionsComponent();
            return bc.AccountExists(account);
        }
        /// <summary>
        /// Calls the SelectLastTranscations business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  Transaction object.</returns>
        public List<Transaction> SelectLastTranscations(int accountID, int Take)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.SelectLastTranscations(accountID, Take);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SelectLastTranscations"));

                }
                return null;
            }
        }
        /// <summary>
        /// Calls the SelectByAccountDateRange business method of the StaticTransactionsComponent.
        /// </summary> 
        /// <returns>Returns a  Transaction object.</returns>
        public List<Transaction> SelectByAccountDateRange(int accountID, DateTime startDate, DateTime endDate)
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.SelectByAccountDateRange(accountID, startDate, endDate);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SelectByAccountDateRange"));

                }
                return null;
            }
        }
        /*
        public List<SimulationException> SimulationExceptions()
        {
            try
            {
                StaticTransactionsComponent bc = new StaticTransactionsComponent();
                return bc.SimulationExceptions( );
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SimulationExceptions"));

                }
                return null;
            }
        }
        */

    }
}