//====================================================================================================
// Code generated with Velocity: SL Gen (Build 2.4.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 10/21/2013 13:27:40 
//====================================================================================================
 
using System;
using System.Collections.Generic; 
using System.Collections.ObjectModel;
using System.Configuration;
using System.Diagnostics;
using System.Linq;
using System.Runtime.Serialization; 
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks; 
using fanikiwaGL.Business;
using fanikiwaGL.Data;
using fanikiwaGL.Entities; 
using fanikiwaGL.Framework;
using fanikiwaGL.Framework.ExceptionHandlers; 
using fanikiwaGL.Framework.ExceptionTypes;
using fanikiwaGL.Services; 
using fanikiwaGL.Services.Contracts;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data; 
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.Logging;


namespace fanikiwaGL.Services
{
    /// <summary>
    /// FinancialPosting service component.
    /// </summary>
    /// 

    public class FinancialPostingService : IFinancialPostingService
    {
        #region "Constructor"
        public FinancialPostingService()
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            IConfigurationSource config = ConfigurationSourceFactory.Create();
            ExceptionPolicyFactory factory = new ExceptionPolicyFactory(config);
            Logger.SetLogWriter(new LogWriterFactory(config).Create(), false);
            ExceptionManager exManager = factory.CreateManager();
            ExceptionPolicy.SetExceptionManager(factory.CreateManager(), false);
        }
        #endregion "Constructor"

        public BatchSimulateStatus SimulatePostBatch(List<Transaction> transactions)
        {
            try
            {
                FinancialPostingComponent bc = new FinancialPostingComponent();
                return bc.SimulatePostBatch(transactions);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                // are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SimulatePostBatch"));
                }
                return null;
            }
        }
        /// <summary>
        /// Calls the BatchPost business method of the FinancialPostingComponent.
        /// </summary>
        /// <param name="Trans"> A Trans value.</param>
        /// <returns>Returns a bool object.</returns>
        public bool BatchPost(List<Transaction> trans)
        {

            try
            {
                FinancialPostingComponent bc = new FinancialPostingComponent();
                return bc.BatchPost(trans);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                // are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    //throw;
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("BatchPost"));
                }
            }
            return false;
        }

        /// <summary>
        /// Calls the PostSingle business method of the FinancialPostingComponent.
        /// </summary>
        /// <param name="transaction"> A transaction value.</param>
        public void PostSingle(Transaction transaction)
        {
            try
            {
                FinancialPostingComponent bc = new FinancialPostingComponent();
                bc.PostSingle(transaction);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("PostSingle"));
                }
            }
        }

        /// <summary>
        /// Calls the SimulatePostSingle business method of the FinancialPostingComponent.
        /// </summary>
        /// <param name="transaction"> A transaction value.</param>
        /// <returns>Returns a SimulatePostStatus object.</returns>
        public SimulatePostStatus SimulatePostSingle(Transaction transaction)
        {
            try
            {
                FinancialPostingComponent bc = new FinancialPostingComponent();
                return bc.SimulatePostSingle(transaction);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SimulatePostSingle"));
                }
            }
            return null;
        }



    }
}