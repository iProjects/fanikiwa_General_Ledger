//====================================================================================================
// Base code generated with Motion: BC Gen (Build 2.2.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/10/2014 14:50:13 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using fanikiwaGL.Entities;
using fanikiwaGL.Business;
using fanikiwaGL.Data;
using fanikiwaGL.Framework;

using fCommon.Utility;
using System.Configuration;

using fCommissions.Commission.Business;
using log4net;
using fanikiwaGL.Framework.ExceptionTypes;

namespace DiaryProcessing
{
    /// <summary>
    /// DiaryPosting business component.
    /// </summary>
    public partial class DiaryPostingComponent
    {
        bool EnableLog = true;

        ILog log;

        public DiaryPostingComponent()
        {
            log4net.Config.BasicConfigurator.Configure();
            log = log4net.LogManager.GetLogger(typeof(DiaryPostingComponent));
            EnableLog = fCommon.Utility.Config.GetBool("EnableLog", EnableLog);
        }

        #region Run Diary
        public void RunDiary(DateTime date)
        {
            DiaryProgramControlDAC dDac = new DiaryProgramControlDAC();
            List<DiaryProgramControl> controlRec = dDac.Select();
            DiaryProgramControl dp = new DiaryProgramControl();
            if (controlRec.Count == 0)
            {

                dp.LastRun = date;
                dp.NextRun = date.AddDays(1);
                dDac.Create(dp);
            }
            else { dp = controlRec[0]; }

            DateTime lastRun = dp.LastRun;
            for (DateTime i = dp.LastRun; i <= date; i = i.AddDays(1))
            {
                if (EnableLog) log.Info("Processing started for [" + i + "]");
                //1. Run STOsn 
                RunSTOs(i);

                //2. Clear valuedated transactions
                RunClearItems(i);

                //update control rec
                lastRun = i;
            }

            //update db now- control rec
            dp.LastRun = lastRun;
            dp.NextRun = lastRun.AddDays(1);
            dDac.UpdateById(dp);
        }
        #endregion

        #region Valuedated Transactions
        private void RunClearItems(DateTime date)
        {
            StaticTransactionsComponent st = new StaticTransactionsComponent();
            st.ClearEffects(date);
        }
        #endregion

        #region STO
        /// <summary>
        /// RunSTO business method. 
        /// </summary>
        /// <param name="_Today">A _Today value.</param>
        /// <returns>Returns a List<STO> object.</returns>



        private void RunSTOs(DateTime date)
        {

            //1. Run STOs
            StaticTransactionsComponent st = new StaticTransactionsComponent();
            List<STO> _ScheduleTransactions = st.SelectSTOByDateFrom(date);

            if (EnableLog) log.Info("Processing [" + _ScheduleTransactions.Count + "] transactions");
            foreach (var _sto in _ScheduleTransactions)
            {
                //Process now
                try
                {
                    string msg = string.Format(@"Processing STO Id[{0}], NextPayDate[{7}] 
                            DrAccount[{1}], 
                            CrAccount[{2}], 
                            PayAmount[{3}], 
                            TotalToPay[{4}], 
                            CrTxnType[{5}], 
                            DrTxnType[{6}]",
                     _sto.Id,
                     _sto.DrAccount,
                     _sto.CrAccount,
                     _sto.PayAmount,
                     _sto.TotalToPay,
                     _sto.CrTxnType,
                     _sto.DrTxnType,
                     _sto.NextPayDate);
                    if (EnableLog) log.Info(msg);

                    ProcessSTOTxn(_sto, date);
                    if (EnableLog) log.Info("Processing STO[" + _sto.Id + "] completed");
                }
                catch (Exception ex)
                {
                    log.Error("An error occurred while processing STO[" + _sto.Id + "] completed\n", ex);
                }

            }

        }

        #region STO Processing
        private void ProcessSTOTxn(STO _sto, DateTime date)
        {
            /*
             * STO transfers money from one account to another
             */
            switch (_sto.STOType)
            {
                case (int)STOTYPE.Normal: //Normal STO; pays the sto
                    ProcessNormalSTO(_sto, date);
                    break;
                case (int)STOTYPE.Sweep: //Sweep STO; sweeps the DrAcc
                    ProcessSweepSTO(_sto, date);
                    break;
                default:
                    ProcessNormalSTO(_sto, date);
                    break;
            }


        }

        private void ProcessNormalSTO(STO _sto, DateTime date)
        {
            //1. if all payments are don, return
            if (_sto.AmountPaid >= _sto.TotalToPay)
            {
                // log
                if (EnableLog) log.Info(@"STO already cleared...");
                return;
            }

            //2. compute AmountToPay
            decimal commission = 0, AmountNeeded = 0;
            decimal AmountToPay = _sto.TotalToPay - _sto.AmountPaid;
            if (AmountToPay > _sto.PayAmount)
            {
                AmountToPay = _sto.PayAmount;
            }


            //2. compute AmountNeeded
            //get commission
            CommissionComponent comm = new CommissionComponent();
            /*Compute commission taking care of flags 
             * 1 _sto.ChargeCommFlag
             * 2 _sto.CommissionPaidFlag
             * 3 _stoCommSourceFlag
             */
            commission = comm.GetCommissionAmountForSTO(_sto);

            AmountNeeded = commission + AmountToPay; //commission will be 0 if not charged
            StaticTransactionsComponent sPost = new StaticTransactionsComponent();
            Account acc = sPost.GetAccount(_sto.DrAccount);
            decimal AmountAvailable = sPost.GetAvailableBalance(acc);


            /*
             * Scenario A - STOpartial pay = false
             * Scenario A1 - Account has enough money for both repayment and commission
             * Scenario A2 - Account has enough money for commission only
             * Scenario A3 - Account does not have enough money even for commission 
             * 
             * Scenario B - STOpartial pay = true
             * Scenario B1 - Account has enough money for both repayment and commission
             * Scenario B2 - Account has enough money for commission only
             * Scenario B3 - Account does not have enough money even for commission 

             */

            //First and foremost charge commission
            /* 1.
            ChargeCommission takes care of
            commission == 0
            sto.CommissionPaidFlag
            sto.ChargeCommFlag
            sto.STOCommFreqFlag.NoCommission
        */
            ChargeCommission(_sto.DrAccount, _sto.CrAccount, _sto, commission, date);

            //Scenario A1 && Scenario B1
            if (AmountAvailable >= AmountNeeded)
            {
                //if account has money, post full amount
                AmountToPay = _sto.PayAmount;
                ProcessInstallment(_sto.DrAccount, _sto.CrAccount, _sto, AmountToPay, date, AmountAvailable);
                return;
            }
            else
            {

                //Scenario A2  - taken care of Batchposting with limit checking

                //Scenario B2
                if (_sto.PartialPay)
                {
                    //account doesnt have enough money, pay whatever is there 
                    AmountToPay = sPost.GetAvailableBalance(acc); ;
                    ProcessInstallment(_sto.DrAccount, _sto.CrAccount, _sto, AmountToPay, date, AmountToPay);
                    return;
                }

                //Scenario A3 && Scenario B3
                if (AmountAvailable < commission)
                {
                    ProcessNonPay(_sto.DrAccount, _sto.CrAccount, _sto, commission, date, AmountAvailable);
                    return;
                }
            }

        }

        private void ProcessSweepSTO(STO _sto, DateTime date)
        {
            /*
             * Sweep everything in the account.
             * Does not consider the value sto.Payamount field
             */
            StaticTransactionsComponent sPost = new StaticTransactionsComponent();
            CommissionComponent comm = new CommissionComponent();
            decimal commission = comm.GetCommissionAmountForSTO(_sto); //get the commission for running the sto from the transaction type
            decimal PayAmount = sPost.GetAvailableBalance(_sto.DrAccount) - commission; //minus comm coz it is going to b charged herebelow separately
            ChargeCommission(_sto.DrAccount, _sto.CrAccount, _sto, commission, date);
            ProcessInstallment(_sto.DrAccount, _sto.CrAccount, _sto, PayAmount, date, PayAmount);
        }


        private void ProcessInstallment(int DrAcc, int CrAcc, STO _sto, decimal PayAmount, DateTime date, decimal AmountAvailable)
        {

            //1. Move Money from DrAcc to CrAcc
            PostSTOTransactions(DrAcc, CrAcc, _sto, PayAmount, date);

            //2. set flags
            _sto.AmountPaid += PayAmount;
            _sto.NextPayDate = this.AddInterval(date, _sto.Interval);
            _sto.NoOfPaymentsMade++;
            _sto.AmountDefaulted += (_sto.PayAmount - PayAmount);
            if (_sto.AmountDefaulted > 0)
            {
                _sto.NoOfDefaults++;
                _sto.NextPayDate = date.AddDays(1); //keep checking every day
            }

            StaticTransactionsComponent stPost = new StaticTransactionsComponent();
            stPost.UpdateSTO(_sto);

            //3. log
            if (EnableLog) log.Info(@"Payment NOT made.: AmountNeeded[" + _sto.PayAmount +
               "], AmountAvailable[" + AmountAvailable + "]");
        }

        private void ProcessNonPay(int Borrower, int Investor, STO _sto, decimal commission, DateTime date, decimal AmountAvailable)
        {
            _sto.NextPayDate = date.AddDays(1); //keep checking every day
            _sto.NoOfDefaults++;
            _sto.AmountDefaulted += (_sto.PayAmount);

            //update db
            StaticTransactionsComponent stPost = new StaticTransactionsComponent();
            stPost.UpdateSTO(_sto);
            if (EnableLog) log.Info(@"Payment NOT made.: AmountNeeded[" + _sto.PayAmount +
                "],  Commission[" + commission + "] AmountAvailable[" + AmountAvailable + "]");
        }

        private List<Transaction> MakeRepayMoneyTxns(string contraref, int DrAcc, int CrAcc, int TxnType, decimal Amount, DateTime stoCreateDate)
        {
            StaticTransactionsComponent scom = new StaticTransactionsComponent();
            TransactionType tt = scom.GetTransactionType(TxnType);
            bool forcePost = tt.ForcePost;

            List<Transaction> txns = new List<Transaction>();
            if (Amount != 0)
            {
                //Build the debit transaction 
                Transaction drtransaction = new Transaction();
                //borrower currentaccount was credited when loan was created, now debit to repay back money
                drtransaction.AccountID = DrAcc;
                drtransaction.Amount = Amount * -1;
                drtransaction.TransactionTypeId = TxnType;

                drtransaction.PostDate = stoCreateDate;
                drtransaction.RecordDate = DateTime.Today;

                drtransaction.ForcePostFlag = forcePost; //forcePost is implemented as a force post
                drtransaction.StatementFlag = "Y";
                drtransaction.Authorizer = "SYSTEM";
                drtransaction.UserID = "SYSTEM";
                drtransaction.Reference = Config.GetString("FANIKIWAAGENT");
                drtransaction.ContraReference = contraref;


                //Build the credit transaction
                Transaction crtransaction = new Transaction();
                //investor currentaccount was debit when loan was created, now credit to receive back money owed
                crtransaction.AccountID = CrAcc;
                crtransaction.Amount = Amount;
                crtransaction.TransactionTypeId = TxnType;

                crtransaction.PostDate = stoCreateDate;
                crtransaction.RecordDate = DateTime.Today;

                crtransaction.ForcePostFlag = forcePost;
                crtransaction.StatementFlag = "Y";
                crtransaction.Authorizer = "SYSTEM";
                crtransaction.UserID = "SYSTEM";
                crtransaction.Reference = Config.GetString("FANIKIWAAGENT");
                crtransaction.ContraReference = contraref;

                //Crossreference narratives
                drtransaction.Narrative = "Repayment " + crtransaction.AccountID;
                crtransaction.Narrative = "Repayment " + drtransaction.AccountID;

                txns.Add(drtransaction);
                txns.Add(crtransaction);
            }
            return txns;
        }

        private bool PostSTOTransactions(int DrAcc, int CrAcc, STO sto, decimal Amount, DateTime stoCreatedDate)
        {

            //Create Ref and contra
            string contraref = Utils.GetRandomHexNumber(10);

            List<Transaction> txns = MakeRepayMoneyTxns(contraref, DrAcc, CrAcc, sto.DrTxnType, Amount, stoCreatedDate);

            //Post
            FinancialPostingComponent fPost = new FinancialPostingComponent();

            //now request posting service to post
            fPost.BatchPostWithSimulation(txns);
            return true;
        }

        private DateTime AddInterval(DateTime d, string interval)
        {
            DateTime ret = d;
            switch (interval.ToUpper())
            {
                case "D":
                    ret = ret.AddDays(1);
                    break;

                case "M":
                    ret = ret.AddMonths(1);
                    break;
                case "Y":
                    ret = ret.AddYears(1);
                    break;
            }
            return ret;
        }
        #endregion

        #region Commission Charging
        private void ChargeCommission(int DrAcc, int CrAcc, STO sto, decimal commission, DateTime date)
        {
            if (commission == 0) return;

            if (sto.CommissionPaidFlag) return;

            if (!sto.ChargeCommFlag) return;

            if (sto.CommFreqFlag == (short)STOCommFreqFlag.NoCommission) return;

            ChargeCommissionImpl(DrAcc, CrAcc, sto, commission, date);
        }

        private void ChargeCommissionImpl(int DrAcc, int CrAcc, STO sto, decimal commission, DateTime date)
        {
            //build commission transactions

            List<Transaction> txns = new List<Transaction>();
            //Create Ref and contra
            string contraref = Utils.GetRandomHexNumber(10);

            bool forcePost = (sto.LimitFlag == (short)PostingLimitCheckFlag.ForcePost);


            /*
                1. If r.ChargeWho == 'L' // Borrower to pay commission
                2. If r.ChargeWho == 'I' // Investor to pay commission
                3. If r.ChargeWho == 'B' // Both to pay commission
             */
            switch (sto.ChargeWho)
            {
                case (short)STOCommissionChargeWho.Borrower:
                    txns = MakeCommissionTxns(forcePost, contraref, DrAcc, sto, commission, date);
                    break;
                case (short)STOCommissionChargeWho.Investor:
                    txns = MakeCommissionTxns(forcePost, contraref, CrAcc, sto, commission, date);
                    break;
                case (short)STOCommissionChargeWho.BothBorrowerAndInvestor:
                    txns = MakeCommissionTxns(forcePost, contraref, DrAcc, sto, commission, date);
                    txns.AddRange(MakeCommissionTxns(forcePost, contraref, CrAcc, sto, commission, date));
                    break;
                default:
                    break;
            }

            //Post
            FinancialPostingComponent fPost = new FinancialPostingComponent();
            //now request posting service to post with limit checking according to sto set up
            fPost.BatchPost(txns, (PostingLimitCheckFlag)sto.LimitFlag);


            //Mark STO Commission as paid
            /*
                Mark comm as paid if CommFreqFlag== STOCommFreqFlag.PayCommissionPerOnce
             */
            if (sto.CommFreqFlag == (short)STOCommFreqFlag.PayCommissionPerOnce)
            {
                sto.CommissionPaidFlag = true;
                StaticTransactionsComponent sPost = new StaticTransactionsComponent();
                sPost.UpdateSTO(sto);
            }
        }
        private List<Transaction> MakeCommissionTxns(bool forcePost, string contraref, int DrAcc, STO sto, decimal Amount, DateTime date)
        {
            List<Transaction> txns = new List<Transaction>();

            if (Amount != 0)
            {
                //Build the debit transaction 
                Transaction drtransaction = new Transaction();
                drtransaction.AccountID = DrAcc;
                drtransaction.Amount = Amount * -1;
                drtransaction.TransactionTypeId = sto.DrTxnType;

                //postdate is sto createddate
                drtransaction.PostDate = date;
                drtransaction.RecordDate = DateTime.Today;

                drtransaction.ForcePostFlag = forcePost;
                drtransaction.StatementFlag = "Y";
                drtransaction.Authorizer = "SYSTEM";
                drtransaction.UserID = "SYSTEM";
                drtransaction.Reference = Config.GetString("FANIKIWAAGENT");
                drtransaction.ContraReference = contraref;

                //Build the credit transaction
                int commissionAccount = sto.CommissionAccount;
                Transaction crtransaction = new Transaction();
                //credit commission account
                crtransaction.AccountID = commissionAccount;
                crtransaction.Amount = Amount;
                crtransaction.TransactionTypeId = sto.CrTxnType;

                //postdate is sto createddate
                crtransaction.PostDate = date;
                crtransaction.RecordDate = DateTime.Today;

                crtransaction.ForcePostFlag = forcePost;
                crtransaction.StatementFlag = "Y";
                crtransaction.Authorizer = "SYSTEM";
                crtransaction.UserID = "SYSTEM";
                crtransaction.Reference = Config.GetString("FANIKIWAAGENT");
                crtransaction.ContraReference = contraref;

                //Crossreference narratives
                drtransaction.Narrative = "Commisson " + crtransaction.AccountID;
                crtransaction.Narrative = "Credited " + drtransaction.AccountID;

                txns.Add(drtransaction);
                txns.Add(crtransaction);

            }
            return txns;
        }

        #endregion

        #region Loans/Investments clearance - Move to fpeerlending
        //private void ClearInvestment(Member Borrower, Member Investor, int TTYpe, decimal Amount, DateTime stoCreatedDate)
        //{
        //    try
        //    {
        //        //build commission transactions

        //        List<Transaction> txns = new List<Transaction>();
        //        //Create Ref and contra
        //        string contraref = Utils.GetRandomHexNumber(10);

        //        MakeClearInvestmentTxns(contraref, Borrower, Investor, TTYpe, Amount, txns, stoCreatedDate);
        //        //Post
        //        FinancialPostingComponent fPost = new FinancialPostingComponent();
        //        //now request posting service to post
        //        fPost.BatchPost(txns);

        //        //ask log4net to log posted transactions details
        //        foreach (var txn in txns)
        //        {
        //            infoLog.Info(string.Format("Posted ClearInvestment Transaction. AccountID: {0}, Amount: {1}, PostDate: {2}, RecordDate: {3}, Narrative: {4} ", txn.AccountID, txn.Amount, txn.PostDate, txn.RecordDate, txn.Narrative));
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        //TODO: Handle your exceptions here. Remove any try-catch blocks if you
        //        //are not handling any exceptions.  
        //        bool rethrow = false;
        //        rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
        //        if (rethrow)
        //        {
        //            CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
        //            throw new FaultException<CustomExpMsg>(customMsg,
        //                new FaultReason(customMsg.ErrorMsg),
        //                new FaultCode("ClearInvestment"));
        //        }
        //    }
        //}

        //public void MakeClearInvestmentTxns(string contraref, Member Borrower, Member Investor, int TxnType, decimal Amount, List<Transaction> txns, DateTime stoCreateDate)
        //{
        //    try
        //    {
        //        //Build the debit transaction 
        //        Transaction drtransaction = new Transaction();
        //        //investor investmentaccount was credited when loan was created, now debit to show repayment
        //        drtransaction.AccountID = Investor.InvestmentAccountId;
        //        drtransaction.Amount = Amount * -1;
        //        drtransaction.TransactionTypeId = TxnType;

        //        //postdate is sto createddate
        //        drtransaction.PostDate = stoCreateDate;
        //        drtransaction.RecordDate = DateTime.Today;

        //        drtransaction.ForcePostFlag = false;
        //        drtransaction.StatementFlag = "Y";
        //        drtransaction.Authorizer = "SYSTEM";
        //        drtransaction.UserID = "SYSTEM";
        //        drtransaction.Reference = Config.GetInt["FANIKIWAAGENT"];
        //        drtransaction.ContraReference = contraref;


        //        //Build the credit transaction
        //        Transaction crtransaction = new Transaction();
        //        //borrower loanaccount was debited when loan was created, now credit to show the repayment
        //        crtransaction.AccountID = Borrower.LoanAccountId;
        //        crtransaction.Amount = Amount;
        //        crtransaction.TransactionTypeId = TxnType;

        //        //postdate is sto createddate
        //        crtransaction.PostDate = stoCreateDate;
        //        crtransaction.RecordDate = DateTime.Today;

        //        crtransaction.ForcePostFlag = false;
        //        crtransaction.StatementFlag = "Y";
        //        crtransaction.Authorizer = "SYSTEM";
        //        crtransaction.UserID = "SYSTEM";
        //        crtransaction.Reference = Config.GetInt["FANIKIWAAGENT"];
        //        crtransaction.ContraReference = contraref;

        //        //Crossreference narratives
        //        drtransaction.Narrative = "ClearInvestment " + crtransaction.AccountID;
        //        crtransaction.Narrative = "ClearInvestment " + drtransaction.AccountID;

        //        txns.Add(drtransaction);
        //        txns.Add(crtransaction);
        //    }
        //    catch (Exception ex)
        //    {
        //        //TODO: Handle your exceptions here. Remove any try-catch blocks if you
        //        //are not handling any exceptions.  
        //        bool rethrow = false;
        //        rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
        //        if (rethrow)
        //        {
        //            CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
        //            throw new FaultException<CustomExpMsg>(customMsg,
        //                new FaultReason(customMsg.ErrorMsg),
        //                new FaultCode("MakeClearInvestmentTxns"));
        //        }
        //    }
        //}


        #endregion



        #endregion


    }
}
